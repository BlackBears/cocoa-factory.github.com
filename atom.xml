<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cocoa Factory]]></title>
  <link href="http://cocoa-factory.github.com/atom.xml" rel="self"/>
  <link href="http://cocoa-factory.github.com/"/>
  <updated>2013-02-11T08:53:58-06:00</updated>
  <id>http://cocoa-factory.github.com/</id>
  <author>
    <name><![CDATA[Alan Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing CCFScrollingTabBar]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/02/10/introducing-ccfscrollingtabbar/"/>
    <updated>2013-02-10T21:56:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/02/10/introducing-ccfscrollingtabbar</id>
    <content type="html"><![CDATA[<p>We&#8217;re pleased to announce the release of a new open source control called <code>CCFScrollingTabBar</code>, a refined scrolling control for iPhone.  You can find it on github <a href="https://github.com/cocoa-factory/CCFScrollingTabBar">here</a>.</p>

<p>It&#8217;s a little like <a href="https://github.com/jasarien/JSScrollableTabBar"><code>JSScrollableTabBar</code></a> with completely customizable colors.  Rather than just talk about it, here&#8217;s what it looks like:
<img class="right" src="http://cocoa-factory.github.com/images/tab-bar-img-001.jpg">  For the developer, this is a simple component to use.  Just provide the instance of <code>CCFScrollableTabView</code> with the colors for the gradient background and text, and the titles of the tabs, and we take care of the rest.  You can receive delegate messages when the use taps on an item.  We setup a simple example project to see it in action.</p>

<h4>Using CCFScrollingTabBar in a nutshell</h4>

<p>Our example project uses a scrolling tab bar instantiated in a nib.  It should be exactly 41 pixels high.  Your instance of <code>CCFScrollingTabView</code> should have a delegate and a data source.  Without a data source you would see nothing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - CCFScrollableTabViewDataSource</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nf">textColorInScrollableTabView:</span><span class="p">(</span><span class="n">CCFScrollableTabView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tabView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nf">darkColorInScrollableTabView:</span><span class="p">(</span><span class="n">CCFScrollableTabView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tabView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.0706f</span> <span class="nl">green:</span><span class="mf">0.1529f</span> <span class="nl">blue:</span><span class="mf">0.4235f</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nf">lightColorInScrollableTabView:</span><span class="p">(</span><span class="n">CCFScrollableTabView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tabView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.258f</span> <span class="nl">green:</span><span class="mf">0.639f</span> <span class="nl">blue:</span><span class="mf">0.890f</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">titlesInScrollableTabView:</span><span class="p">(</span><span class="n">CCFScrollableTabView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tabView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Afrikaans&quot;</span><span class="p">,</span><span class="s">@&quot;Basque&quot;</span><span class="p">,</span><span class="s">@&quot;Catalan&quot;</span><span class="p">,</span><span class="s">@&quot;Croatian&quot;</span><span class="p">,</span><span class="s">@&quot;Danish&quot;</span><span class="p">,</span><span class="s">@&quot;English&quot;</span><span class="p">,</span><span class="s">@&quot;French&quot;</span><span class="p">,</span><span class="s">@&quot;German&quot;</span><span class="p">,</span><span class="s">@&quot;Hungarian&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!  If you want to know when the user taps on an item, you should implement the <code>scrollableTabView:didSelectItemAtIndex:</code> method on the <code>CCFScrollableTabViewDelegate</code> protocol.  That way your class will get a message with the index of the selection.</p>

<ul>
<li><a href="https://github.com/cocoa-factory/CCFScrollingTabBar">CCFScrollingTabBar</a> on github</li>
<li><a href="http://184.72.241.210/docs/CCFScrollingTabView/index.html">Documentation</a></li>
</ul>


<p>Comments, questions?  Contact Alan at <code>@NSBum</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[troubleshooting cocoapods installation]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation/"/>
    <updated>2013-02-01T04:49:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/?q=rvm%20sy#">CocoaPods</a> is a popular new way to manage dependencies in Xcode projects.</p>

<h4>Canonical installation</h4>

<p>CocoaPods is installed as a ruby gem; and usually everything &#8216;just works.&#8217;  Here&#8217;s how you install CocoaPods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install cocoapods
</span></code></pre></td></tr></table></div></figure>


<p>If everything works properly, you should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Fetching: i18n-0.6.1.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: multi_json-1.5.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: activesupport-3.2.11.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: colored-1.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: xcodeproj-0.4.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Building native extensions.  This could take a <span class="k">while</span>...
</span><span class='line'>Fetching: multipart-post-1.1.5.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: faraday-0.8.4.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: addressable-2.3.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: faraday_middleware-0.9.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: hashie-1.2.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: netrc-0.7.7.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: octokit-1.22.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: escape-0.0.4.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: json-1.7.6.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Building native extensions.  This could take a <span class="k">while</span>...
</span><span class='line'>Fetching: open4-1.3.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: rake-0.9.6.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: cocoapods-0.16.1.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed i18n-0.6.1
</span><span class='line'>Successfully installed multi_json-1.5.0
</span><span class='line'>Successfully installed activesupport-3.2.11
</span><span class='line'>Successfully installed colored-1.2
</span><span class='line'>Successfully installed xcodeproj-0.4.2
</span><span class='line'>Successfully installed multipart-post-1.1.5
</span><span class='line'>Successfully installed faraday-0.8.4
</span><span class='line'>Successfully installed addressable-2.3.2
</span><span class='line'>Successfully installed faraday_middleware-0.9.0
</span><span class='line'>Successfully installed hashie-1.2.0
</span><span class='line'>Successfully installed netrc-0.7.7
</span><span class='line'>Successfully installed octokit-1.22.0
</span><span class='line'>Successfully installed escape-0.0.4
</span><span class='line'>Successfully installed json-1.7.6
</span><span class='line'>Successfully installed open4-1.3.0
</span><span class='line'>Successfully installed rake-0.9.6
</span><span class='line'>Successfully installed cocoapods-0.16.1
</span><span class='line'>17 gems installed
</span><span class='line'>Installing ri documentation <span class="k">for </span>i18n-0.6.1...
</span><span class='line'>Installing ri documentation <span class="k">for </span>multi_json-1.5.0...
</span><span class='line'>Installing ri documentation <span class="k">for </span>activesupport-3.2.11...
</span><span class='line'>Installing ri documentation <span class="k">for </span>colored-1.2...
</span><span class='line'>Installing ri documentation <span class="k">for </span>xcodeproj-0.4.2...
</span><span class='line'>Installing ri documentation <span class="k">for </span>multipart-post-1.1.5...
</span><span class='line'>Installing ri documentation <span class="k">for </span>faraday-0.8.4...
</span><span class='line'>Installing ri documentation <span class="k">for </span>addressable-2.3.2...
</span><span class='line'>Installing ri documentation <span class="k">for </span>faraday_middleware-0.9.0...
</span><span class='line'>Installing ri documentation <span class="k">for </span>hashie-1.2.0...
</span><span class='line'>Installing ri documentation <span class="k">for </span>netrc-0.7.7...
</span><span class='line'>Installing ri documentation <span class="k">for </span>octokit-1.22.0...
</span><span class='line'>Installing ri documentation <span class="k">for </span>escape-0.0.4...
</span><span class='line'>Installing ri documentation <span class="k">for </span>json-1.7.6...
</span><span class='line'>Installing ri documentation <span class="k">for </span>open4-1.3.0...
</span><span class='line'>Installing ri documentation <span class="k">for </span>rake-0.9.6...
</span><span class='line'>Installing ri documentation <span class="k">for </span>cocoapods-0.16.1...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>i18n-0.6.1...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>multi_json-1.5.0...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>activesupport-3.2.11...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>colored-1.2...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>xcodeproj-0.4.2...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>multipart-post-1.1.5...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>faraday-0.8.4...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>addressable-2.3.2...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>faraday_middleware-0.9.0...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>hashie-1.2.0...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>netrc-0.7.7...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>octokit-1.22.0...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>escape-0.0.4...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>json-1.7.6...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>open4-1.3.0...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>rake-0.9.6...
</span><span class='line'>Installing RDoc documentation <span class="k">for </span>cocoapods-0.16.1...
</span></code></pre></td></tr></table></div></figure>


<h4>Failed installation</h4>

<p>However, CocoaPods installation can fail for a number of reasons.  Here are a few things to check if the installation fails:</p>

<ul>
<li><p><strong>Have you installed the Xcode command line tools?</strong>  If you update Xcode, then you need to re-download the command line tools.  This is a common gotcha.</p></li>
<li><p><strong>Are you using MacRuby?</strong> MacRuby is not supported.  Your ruby should be Ruby MRI 1.8.7 or 1.9.3</p></li>
</ul>


<h4>Errors during installation</h4>

<p>Our initial attempt with <code>sudo gem install cocoapods</code> gave the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib/ruby/1.9.1/yaml.rb:56:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>:
</span><span class='line'>It seems your ruby installation is missing psych <span class="o">(</span><span class="k">for </span>YAML output<span class="o">)</span>.
</span><span class='line'>To eliminate this warning, please install libyaml and reinstall your ruby.
</span><span class='line'>ERROR:  Loading <span class="nb">command</span>: install <span class="o">(</span>LoadError<span class="o">)</span>
</span><span class='line'>    cannot load such file -- zlib
</span><span class='line'>ERROR:  While executing gem ... <span class="o">(</span>NameError<span class="o">)</span>
</span><span class='line'>    uninitialized constant Gem::Commands::InstallCommand
</span></code></pre></td></tr></table></div></figure>


<p>First, we tried to just install the libyaml package with <code>rvm pkg install libyaml</code> but this got us nowhere.  Same error when we try to <code>sudo gem install cocoapods</code>.</p>

<p>Since we weren&#8217;t using ruby for anything else on the system, blowing away RVM seemed like a benign (if nuclear) option.  So we used <code>rvm implode</code> and removed all references to <code>.rvm</code> in our PATH.  You need to also take a look at <code>.bashrc</code> <code>.profile</code> and <code>.bash_profile</code> for other references to rvm if you want to try this option.  See the accepted answer to <a href="http://stackoverflow.com/questions/3558656/how-to-remove-rvm-ruby-version-manager-from-my-system">this question</a> for details on the nuclear option for removing <code>rvm</code>.</p>

<p>Next we reinstalled <code>rvm</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>This installs <code>rvm</code> and the latest stable version of ruby.  Next update the terminal and check the version of ruby in use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span><span class="nb">source</span> /usr/local/rvm/scripts/rvm
</span><span class='line'>Darwin:~ alan<span class="nv">$ </span>which ruby
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm&#8230;.we&#8217;re still using the system ruby.  Let&#8217;s see what ruby versions we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>A RVM version 1.18.5 <span class="o">(</span>stable<span class="o">)</span> is installed yet 1.15.7 <span class="o">(</span>stable<span class="o">)</span> is loaded.
</span><span class='line'>Please <span class="k">do </span>one of the following:
</span><span class='line'>  * <span class="s1">&#39;rvm reload&#39;</span>
</span><span class='line'>  * open a new shell
</span><span class='line'>  * <span class="s1">&#39;echo rvm_auto_reload_flag=1 &gt;&gt; ~/.rvmrc&#39;</span> <span class="c"># for auto reload with msg.</span>
</span><span class='line'>  * <span class="s1">&#39;echo rvm_auto_reload_flag=2 &gt;&gt; ~/.rvmrc&#39;</span> <span class="c"># for silent auto reload.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&#8217;s do as it says and reload:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span>rvm reload
</span><span class='line'>RVM reloaded!
</span><span class='line'>Darwin:~ alan<span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-1.9.3-p194 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>* ruby-1.9.3-p374 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can confirm the ruby version in use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span>which ruby
</span><span class='line'>/usr/local/rvm/rubies/ruby-1.9.3-p374/bin/ruby
</span></code></pre></td></tr></table></div></figure>


<p>So we should be good to go.  Let&#8217;s try installing CocoaPods again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span>sudo gem install cocoapods
</span><span class='line'>Fetching: i18n-0.6.1.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: multi_json-1.5.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: activesupport-3.2.11.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: colored-1.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Fetching: xcodeproj-0.4.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'><span class="c"># many more lines follow...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success! Now back to the canonical installation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Darwin:~ alan<span class="nv">$ </span>pod setup
</span><span class='line'>Setting up CocoaPods master repo
</span><span class='line'>Cloning spec repo <span class="sb">`</span>master<span class="s1">&#39; from `https://github.com/CocoaPods/Specs.git&#39;</span> <span class="o">(</span>branch <span class="sb">`</span>master<span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>Setup completed <span class="o">(</span><span class="nb">read</span>-only access<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;`</p>

<h4>Conclusion</h4>

<p>For developers with more experience dealing with ruby, its versions and dependencies, deleting rvm and reinstalling may seem like a blunt instrument.  For me, this worked well and allowed us to start working with CocoaPods after a lot of earlier frustration.</p>

<h4>Questions/comments?</h4>

<p>I&#8217;d love to hear from you at <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanding NSOutlineView at load time]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/17/expanding-nsoutlineview-at-load-time/"/>
    <updated>2012-12-17T09:40:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/17/expanding-nsoutlineview-at-load-time</id>
    <content type="html"><![CDATA[<p>Ran across <a href="http://simplyhacking.com/expanding-nsoutlineview-nodes-at-application-start.html">this post</a> on <a href="simplyhacking.com">Simply Hacking</a> that deals with the problem of expanding items in <code>NSOutlineView</code> when the view loads.</p>

<p>If you try to expand items in <code>awakeFromNib</code>, it will fail because the content is not prepared until after <code>awakeFromNib</code> is called on the controller.  The key is to observe <code>content</code> on the <code>NSTreeController</code> using KVO.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLDB print registers]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers/"/>
    <updated>2012-12-16T12:53:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers</id>
    <content type="html"><![CDATA[<p>Somes while debugging, or when you want to understand what the compiler doing with your code under the hood, you may want to print the contents of all the registers in the current frame.</p>

<p>To print the current register contents in LLDB it&#8217;s <code>register read</code>:
<img src="http://cocoa-factory.github.com/images/lldb.png" alt="console" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing RegexMatch for Mac]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/15/announcing-regexmatch-for-mac/"/>
    <updated>2012-12-15T06:44:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/15/announcing-regexmatch-for-mac</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://i.imgur.com/s2JWp.png">
We&#8217;re delighted to announce our newest app - <strong>RegexMatch for Mac OS</strong>! If you use regular expressions in your development process, you&#8217;ll want to <a href="https://itunes.apple.com/us/app/regexmatch/id582049745?mt=12">check it out</a>.  You can write and test regular expressions, then generate and export code in your language of choice.</p>

<p>Learn more about <a href="http://cocoa-factory.github.com/products/regexmatch/macos">RegexMatch</a>.</p>

<p>Do you like RegexMatch - drop us a line <code>@CocoaFactory</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forgetting Sandbox entitlements]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/11/28/forgetting-sandbox-entitlements/"/>
    <updated>2012-11-28T06:19:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/11/28/forgetting-sandbox-entitlements</id>
    <content type="html"><![CDATA[<p>I was recently prepping a Mac OS app for Sandbox compliance but couldn&#8217;t figure out why the following error: <code>NSPOSIXErrorDomain Code=1 "The operation couldn’t be completed. Operation not permitted"</code></p>

<p>Finally it dawned on me that even simple outgoing network requests from the app, need to be specifically enabled thusly.</p>

<p><img src="http://i.imgur.com/6hz3q.png"></p>

<p>I wish the error were more descriptive or that the <code>userInfo</code> dictionary of the <code>NSError</code> at least had a Sandbox violation description key.</p>

<p>Questions or comments about this post?  Contact the author of this post <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86_64 Assembly language tutorial:part 4]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/11/24/x86-64-assembly-language-tutorial-part-4/"/>
    <updated>2012-11-24T05:41:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/11/24/x86-64-assembly-language-tutorial-part-4</id>
    <content type="html"><![CDATA[<p>In <a href="">Part I</a> or our x86_64 assembly language tutorial for Mac OS, we analyzed the disassembly of a simple C program.  In <a href="">Part II</a>, we extended the example and learned more about the x86_64 ABI and register usage.  In <a href="">Part III</a>, we delved into the world of objects and showed what happens behind the scenes when objects meet silicon.</p>

<p>This time, we&#8217;ll take a break from the analytical mode to try our hand at writing a simple program in assembly.   We&#8217;re going to use two different assemblers to show the range of syntactical differences.</p>

<h3>Xcode assembly language project</h3>

<p>Although Xcode doesn&#8217;t have an assembly language project template, you can start a new command line tool project for Mac OS and just delete the main.m file.  Then you can add an assembly language file to the project and paste the following code:</p>

<div><script src='https://gist.github.com/4139421.js?file='></script>
<noscript><pre><code>.private_extern    _main
.globl  _main
_main:                                  #   main entry point

    pushq   %rbp

    movq    %rsp, %rbp

    leaq    _helloMessage(%rip), %rdi
    callq   _puts
    xorl    %eax, %eax
    popq    %rbp
    ret

.section    __TEXT,__cstring,cstring_literals

_helloMessage:  
    .asciz   &quot;Hello world!&quot;</code></pre></noscript></div>


<p>Like we&#8217;ve done with each of the prior tutorials, lets walk through the code, as simple as it is, step-by-step</p>

<h4>Step 1 - Preamble</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="p">.</span><span class="n">private_extern</span>   <span class="n">_main</span>
</span><span class='line'><span class="p">.</span><span class="n">globl</span>  <span class="n">_main</span>
</span><span class='line'><span class="nl">_main:</span>                                  <span class="err">#</span>   <span class="n">main</span> <span class="n">entry</span> <span class="n">point</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&#8217;re just defining symbols for our entry point <code>_main</code>.</p>

<h4>Step 2 - Save frame pointer</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">pushq</span>    <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just save the frame pointer.</p>

<h4>Step 3 - Print a &#8220;Hello world!&#8221; string</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">leaq</span> <span class="n">_helloMessage</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">_puts</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="n">section</span>    <span class="n">__TEXT</span><span class="p">,</span><span class="n">__cstring</span><span class="p">,</span><span class="n">cstring_literals</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_helloMessage:</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asciz</span>   <span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we load a reference to the <code>_helloMessage</code> into <code>%rdi</code> our first function argument register.  And call <code>_puts</code>.  The <code>leaq</code> instruction is the 64-bit version of <code>lea</code> in x86 assembly.  This instruction places the <em>address</em> specified by the second operand into the register specified by the first operand.  It&#8217;s not the contents of the memory location that are loaded, only the effective address that is computed and placed into the register.  (Sounds like a pointer in higher level languages, doesn&#8217;t it?)</p>

<h4>Step 4 - Clean up</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">xorl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we zero our function return register, pop the frame pointer, and return.  That was easy!</p>

<h3>NASM project</h3>

<p>Next, we&#8217;re going to go through an alternative way of getting the job done with an assembler called nasm - for &#8220;netwide assembler&#8221;.  It uses a very different syntax than we are accustomed to seeing from the analyses we&#8217;ve done so far.  We also are responsible for building the Mach-O object code and linking the program ourselves.  But it&#8217;s a good experience to go through.</p>

<h4>Download the 64-bit version of <code>nasm</code></h4>

<p>For compatibility with our GNU assembler version of the &#8220;Hello world&#8221; program, we want to do it in 64 bit form.  But the version of <code>nasm</code> that ships with Mac as of this writing is an older 32 bit version.  You can check it our on your computer with <code>nasm -v</code> at the Terminal.  On my machine, it is <code>0.98.40</code>.  We need to download the latest version before continuing.  You can find it <a href="http://www.nasm.us/pub/nasm/releasebuilds/2.10.05/macosx/">here</a>.  I just downloaded it, unzipped, and copied to <code>/usr/bin</code> so I wouldn&#8217;t have to deal with mofiying the path.</p>

<h4>Write the program for use in <code>nasm</code></h4>

<p>Here&#8217;s the complete source:</p>

<div><script src='https://gist.github.com/4139297.js?file='></script>
<noscript><pre><code>;
;
;   hello64.asm
;
;   A quick demonstration of 64 assembly language on Mac OS
;
;   Generate object code:
;nasm-2.09.10 -f macho64 hello64.asm
;
;   Link executable
;gcc -m64 -mmacosx-version-min=10.6 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -o hello64 hello64.o
;

section .data
    
    hello            db &quot;Hello, world!&quot;, 0  

section .text
    
    global _main
    extern _puts

_main:
    push    r15             ;save %r15 to stack
    mov     r15,    rsp     ;load the stack pointer into %r15
    push    rbx             ;push base pointer to the stack

    mov     rbx,    rsp     ;load the stack pointer into the base pointer
    and     spl,    0xF0    ;align the stack pointer on a boundary

    mov     rdi,    hello   ;move address of string to %rdi (1st function arg register)
    call    _puts           ;call puts

    mov     rsp,    rbx     ;mov %rbx back into stack pointer after the library call

    pop     rbx             ;restore %rbx (a callee saved register)
    mov     rsp,    r15     ;restore the stack pointer from %r15
    pop     r15             ;restore %r15
    ret</code></pre></noscript></div>


<p>The first thing to recognize with <code>nasm</code> syntax is that the operand order is reversed compared with the GNU assembler syntax.  So the instruction <code>mov r15, rsp</code> moves the contents of register <code>rsp</code> to <code>r15</code>.  We also omit the <code>%</code> sign before register names.  And nasm infers the correct version of an instruction depending on the width of the operands; so we use <code>mov</code> instead of <code>movb</code>, <code>movl</code>, or <code>movq</code>.  Apart from those differences, we do things the same way.  Let&#8217;s go through the program step-by-step.</p>

<h4>Step 1: Application sections</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">section</span> <span class="p">.</span><span class="n">data</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hello</span>            <span class="n">db</span> <span class="s">&quot;Hello, world!&quot;</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">section</span> <span class="p">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">global</span> <span class="n">_main</span>
</span><span class='line'>    <span class="k">extern</span> <span class="n">_puts</span>
</span></code></pre></td></tr></table></div></figure>


<p>We being with a data section that contain a single symbol <code>hello</code>.  <code>db</code> signifies a data block.  In this case the data block is a NULL-terminated string.  The <code>0</code> after the string is the NULL termination.  After the <code>.data</code> section, we have the <code>.text</code> section which is the code.  He expose <code>_main</code> - our entry point - as a global symbol and mame note that <code>_puts</code> is defined elsewhere and will need to be linked.</p>

<h4>Step 2: Prologue</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="nl">_main:</span>
</span><span class='line'>    <span class="n">push</span>    <span class="n">r15</span>             <span class="p">;</span><span class="n">save</span> <span class="o">%</span><span class="n">r15</span> <span class="n">to</span> <span class="n">stack</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="n">r15</span><span class="p">,</span>    <span class="n">rsp</span>     <span class="p">;</span><span class="n">load</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">pointer</span> <span class="n">into</span> <span class="o">%</span><span class="n">r15</span>
</span><span class='line'>    <span class="n">push</span>    <span class="n">rbx</span>             <span class="p">;</span><span class="n">push</span> <span class="n">base</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">stack</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This is similar to the prologues we&#8217;ve seen before - but take a close look here at the reversed order of the operands.  If you don&#8217;t understand what our function prologue is doing at this point, best go back to our earlier tutorials and review.</p>

<h4>Step 3: Call <code>puts</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">mov</span>     <span class="n">rbx</span><span class="p">,</span>    <span class="n">rsp</span>     <span class="p">;</span><span class="n">load</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">pointer</span> <span class="n">into</span> <span class="n">the</span> <span class="n">base</span> <span class="n">pointer</span>
</span><span class='line'><span class="n">and</span>     <span class="n">spl</span><span class="p">,</span>    <span class="mh">0xF0</span>    <span class="p">;</span><span class="n">align</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">pointer</span> <span class="n">on</span> <span class="n">a</span> <span class="n">boundary</span>
</span><span class='line'>
</span><span class='line'><span class="n">mov</span>     <span class="n">rdi</span><span class="p">,</span>    <span class="n">hello</span>   <span class="p">;</span><span class="n">move</span> <span class="n">address</span> <span class="n">of</span> <span class="n">string</span> <span class="n">to</span> <span class="o">%</span><span class="n">rdi</span> <span class="p">(</span><span class="mi">1</span><span class="n">st</span> <span class="n">function</span> <span class="n">arg</span> <span class="k">register</span><span class="p">)</span>
</span><span class='line'><span class="n">call</span>    <span class="n">_puts</span>           <span class="p">;</span><span class="n">call</span> <span class="n">puts</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two instructions have the effect of aligning the stack pointer to a 16 byte boundary as required by the x86_64 ABI before the upcoming call.  Then we move the address of the symbol <code>hello</code> to the <code>%rdi</code> register (the first function argument register) and call <code>_puts</code>.</p>

<h4>Step 4: Cleanup</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">mov</span>     <span class="n">rsp</span><span class="p">,</span>    <span class="n">rbx</span>     <span class="p">;</span><span class="n">mov</span> <span class="o">%</span><span class="n">rbx</span> <span class="n">back</span> <span class="n">into</span> <span class="n">stack</span> <span class="n">pointer</span> <span class="n">after</span> <span class="n">the</span> <span class="n">library</span> <span class="n">call</span>
</span><span class='line'>
</span><span class='line'><span class="n">pop</span>     <span class="n">rbx</span>             <span class="p">;</span><span class="n">restore</span> <span class="o">%</span><span class="n">rbx</span> <span class="p">(</span><span class="n">a</span> <span class="n">callee</span> <span class="n">saved</span> <span class="k">register</span><span class="p">)</span>
</span><span class='line'><span class="n">mov</span>     <span class="n">rsp</span><span class="p">,</span>    <span class="n">r15</span>     <span class="p">;</span><span class="n">restore</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">pointer</span> <span class="n">from</span> <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="n">pop</span>     <span class="n">r15</span>             <span class="p">;</span><span class="n">restore</span> <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that&#8217;s left is to clean up, restoring the registers and the stack before returning.</p>

<p><img class="left" src="http://i.imgur.com/a7rqS.png" title="&#34;Build, link, run&#34;" alt="&#34;Build, link, run&#34;"></p>

<h4>Build</h4>

<p>But the program text file isn&#8217;t useful by itself.  Save it to disk as &#8220;hello64.asm&#8221;.  Now we need to generate the object code.  You will need to adjust the path names but on my machine, it&#8217;s: <code>nasm-2.09.10 -f macho64 hello64.asm</code> to generate the 64-bit Mach-O object code and <code>gcc -m64 -mmacosx-version-min=10.6 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -o hello64 hello64.o</code> to link it.</p>

<p>Now to run our little application, from the directory where it resides:  <code>/.hello64</code>.</p>

<p>Questions or comments about this post?  Contact the author of this post <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86_64 Assembly Language Tutorial: Part 3]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-3/"/>
    <updated>2012-11-23T08:48:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-3</id>
    <content type="html"><![CDATA[<p>In our <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">first tutorial</a> in this series, we presented a simple program in C and analyzed its x86_64 disassembly.  We extended the discussion in <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-2/">Part II</a> to show register usage according to the x86_64 ABI.</p>

<p>Now, we&#8217;re going to start to tiptoe gently into the world of Objective-C objects and use that as a platform for peeking into what ARC does to our code behind our backs.  Let&#8217;s get started with a very simple Objective-C program:</p>

<div><script src='https://gist.github.com/4135901.js?file='></script>
<noscript><pre><code>#import &lt;Foundation/Foundation.h&gt;

@interface Foo : NSObject {
    NSInteger _bar;
}

- (id)initWithBar:(NSInteger)aBar;
- (void)printBar;

@end

@implementation Foo

- (id)initWithBar:(NSInteger)aBar {
    self = [super init];
    if( !self ) return nil;
    
    _bar = aBar;
    return self;
}

- (void)printBar {
    printf(&quot;%ld&quot;,_bar);
}

@end

int main(int argc, const char * argv[])
{

    @autoreleasepool {
        Foo *foo = [[Foo alloc] initWithBar:15];
        [foo printBar];
    }
    return 0;
}</code></pre></noscript></div>


<p>Build and run this little application in Xcode and use the Assistant editor to review its disassembly just like we showed in <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-2/">Part II</a>:</p>

<div><script src='https://gist.github.com/4135938.js?file='></script>
<noscript><pre><code>0x100000de0:  pushq  %rbp
0x100000de1:  movq   %rsp, %rbp
0x100000de4:  pushq  %r15
0x100000de6:  pushq  %r14
0x100000de8:  pushq  %rbx
0x100000de9:  pushq  %rax
0x100000dea:  callq  0x100000e52               ; symbol stub for: objc_autoreleasePoolPush
0x100000def:  movq   %rax, %r14
0x100000df2:  movq   903(%rip), %rdi           ; (void *)0x0000000100001190: Foo
0x100000df9:  leaq   880(%rip), %rsi           ; { /usr/lib/libobjc.A.dylib`objc_msgSend_vtable1, &quot;alloc&quot; }
0x100000e00:  callq  *874(%rip)                ; { /usr/lib/libobjc.A.dylib`objc_msgSend_vtable1, &quot;alloc&quot; }
0x100000e06:  movq   843(%rip), %rsi           ; &quot;initWithBar:&quot;
0x100000e0d:  movq   508(%rip), %r15           ; (void *)0x00007fff871c3240: objc_msgSend
0x100000e14:  movq   %rax, %rdi
0x100000e17:  movl   $15, %edx
0x100000e1c:  callq  *%r15
0x100000e1f:  movq   %rax, %rbx
0x100000e22:  movq   823(%rip), %rsi           ; &quot;printBar&quot;
0x100000e29:  movq   %rbx, %rdi
0x100000e2c:  callq  *%r15
0x100000e2f:  movq   %rbx, %rdi
0x100000e32:  callq  0x100000e5e               ; symbol stub for: objc_release
0x100000e37:  movq   %r14, %rdi
0x100000e3a:  callq  0x100000e4c               ; symbol stub for: objc_autoreleasePoolPop
0x100000e3f:  xorl   %eax, %eax
0x100000e41:  addq   $8, %rsp
0x100000e45:  popq   %rbx
0x100000e46:  popq   %r14
0x100000e48:  popq   %r15
0x100000e4a:  popq   %rbp
0x100000e4b:  ret</code></pre></noscript></div>


<h3>Step-by-step</h3>

<p>Just looking over the disassembly, we see there are many more calls to functions in the Objective-C runtime; this will keep us busy in the step-by-step analysis.</p>

<h4>Step 1 - Preamble</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000de0</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000de1</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000de4</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="mh">0x100000de6</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">r14</span>
</span><span class='line'><span class="mh">0x100000de8</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="mh">0x100000de9</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rax</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with our previous forays into the world of assembly language, the function call to <code>main</code> starts with the typical preamble where we push the base pointer, move the current stack pointer to the base pointer then push several registers that we&#8217;re going to use later.</p>

<h4>Step 2 - Begin autorelease pool</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000dea</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000e52</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_autoreleasePoolPush</span>
</span><span class='line'><span class="mh">0x100000def</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we call the <code>objc_autoreleasePoolPush</code> function in the Object-C runtime and save its return value - presumably a reference to the autorelease pool to the register <code>%r14</code>.</p>

<h4>Step 3 - Allocating a <code>Foo</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000df2</span><span class="o">:</span>  <span class="n">movq</span>   <span class="mi">903</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>           <span class="p">;</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0000000100001190</span><span class="o">:</span> <span class="n">Foo</span>
</span><span class='line'><span class="mh">0x100000df9</span><span class="o">:</span>  <span class="n">leaq</span>   <span class="mi">880</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsi</span>           <span class="p">;</span> <span class="p">{</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">objc_msgSend_vtable1</span><span class="p">,</span> <span class="s">&quot;alloc&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="mh">0x100000e00</span><span class="o">:</span>  <span class="n">callq</span>  <span class="o">*</span><span class="mi">874</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>                <span class="p">;</span> <span class="p">{</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">objc_msgSend_vtable1</span><span class="p">,</span> <span class="s">&quot;alloc&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the comments, it looks like we&#8217;re going to allocate a new <code>Foo</code>.  The instruction pointer offsets are specified, but they don&#8217;t really tell us that much.  If we want to learn more, we can switch Xcode&#8217;s Assistant view to Assembly.  Let&#8217;s looks at this very carefully.</p>

<p>The first instruction corresponds to the following in the assembly code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">movq</span> <span class="n">L_OBJC_CLASSLIST_REFERENCES_</span><span class="err">$</span><span class="n">_</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rcx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The value from the executable that we are loading into <code>%rdi</code> is <code>rip</code> + <code>L_OBJC_CLASSLIST_REFERENCES_$_</code>.  Let&#8217;s look at what&#8217;s at that location:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">L_OBJC_CLASSLIST_REFERENCES_</span><span class="err">$</span><span class="n">_</span><span class="o">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">_OBJC_CLASS_</span><span class="err">$</span><span class="n">_Foo</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">section</span>  <span class="n">__TEXT</span><span class="p">,</span><span class="n">__objc_methname</span><span class="p">,</span><span class="n">cstring_literals</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.quad</code> is an assembler directive that emits an 8-byte integer, in this case the symbol <code>_OBJC_CLASS_$_Foo</code>.  Rather than go further down the rabbit hole at this stage, let&#8217;s just say that this is a reference to the class <code>Foo</code> which we are loading into <code>%rdi</code>.</p>

<p>Then we have the instruction <code>0x100000df9:  leaq   880(%rip), %rsi</code> in the disassembly.  Turning again to the <strong>assembly</strong> code again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">leaq</span> <span class="n">l_objc_msgSend_fixup_alloc</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsi</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to digress for a second examine this symbol <code>objc_msgSend_fixup_alloc</code> because it tells us something about the Objective-C runtime.  Most Objective-C methods get dispatched using a hash table in  <code>objc_msgSend</code>.  But some of the most commonly used method are dispatched using a virtual table as a runtime optimization.  In fact, if we look at the comment <code>{ /usr/lib/libobjc.A.dylib 'objc_msgSend_vtable1', "alloc" }</code> we can see evidence of the obtimization.  The function <code>objc_msgSend_vtable1</code> is the vtable-referenced version of <code>objc_msgSend</code> for <code>alloc</code>.  For completeness, others include:</p>

<table>
<thead>
<tr>
<th>Optimized objc_msgSend  </th>
<th> Referenced method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>objc_msgSend_vTable0</code>  </td>
<td> <code>allocWithZone:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable1</code>  </td>
<td> <code>alloc</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable2</code>  </td>
<td> <code>class</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable3</code>  </td>
<td> <code>self</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable4</code>  </td>
<td> <code>isKindOfClass:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable5</code>  </td>
<td> <code>respondsToSelector:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable6</code>  </td>
<td> <code>isFlipped</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable7</code>  </td>
<td> <code>length</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable8</code>  </td>
<td> <code>objectForKey:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable9</code>  </td>
<td> <code>count</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable10</code> </td>
<td> <code>objectAtIndex:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable11</code> </td>
<td> <code>isEqualToString:</code></td>
</tr>
<tr>
<td><code>objc_msgSend_vTable12</code> </td>
<td> <code>isEqual:</code></td>
</tr>
</tbody>
</table>


<p>Back to our function call setup; we&#8217;ve loaded a reference to the class <code>Foo</code> into <code>%rdi</code> which according to the <a href="http://www.x86-64.org/documentation/abi.pdf">x86_64 ABI</a> is the first argument to a function.  And we&#8217;ve loaded <code>objc_msgSend_vTable1</code> into <code>%rsi</code> which is the second argument to a function.  All that&#8217;s left is to call a function.  Turning to the <strong>assembly</strong> code again, we see that the calling instruction is <code>callq  *l_objc_msgSend_fixup_alloc(%rip)</code> meaning that we are calling the address of the symbol <code>l_objc_msgSend_fixup_alloc</code> + the address of the instruction pointer.  Following the symbol <code>l_objc_msgSend_fixup_alloc</code> further in the assembly, there is a <code>.quad</code> value of <code>_objc_msgSend_fixup</code> there.  So, we&#8217;re calling <code>objc_msgSend_fixup</code> with the parameters of <code>Foo</code> and <code>alloc</code>, thereby allocating a <code>Foo</code>.  Whew.</p>

<h4>Step 4 - Initializing a <code>Foo</code></h4>

<p>Having allocated a <code>Foo</code> we&#8217;ll probably have to initialize it.  Here&#8217;s the assembly code that does it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000e06</span><span class="o">:</span>  <span class="n">movq</span>   <span class="mi">843</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsi</span>           <span class="p">;</span> <span class="s">&quot;initWithBar:&quot;</span>
</span><span class='line'><span class="mh">0x100000e0d</span><span class="o">:</span>  <span class="n">movq</span>   <span class="mi">508</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">r15</span>           <span class="p">;</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x00007fff871c3240</span><span class="o">:</span> <span class="n">objc_msgSend</span>
</span><span class='line'><span class="mh">0x100000e14</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000e17</span><span class="o">:</span>  <span class="n">movl</span>   <span class="err">$</span><span class="mi">15</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'><span class="mh">0x100000e1c</span><span class="o">:</span>  <span class="n">callq</span>  <span class="o">*%</span><span class="n">r15</span>
</span></code></pre></td></tr></table></div></figure>


<p>We move a reference to <code>initWithBar</code> into <code>%rsi</code> which is always our 2nd argument register.  Then we move <code>objc_msgSend</code> to <code>%r15</code> which we later call.  The instruction <code>movq   %rax, %rdi</code> moves the object returned by <code>alloc</code> to <code>%rdi</code> which is our 1st function argument register.  So we have arguments 1 and 2 taken care of.  What about the value of <code>bar</code>?  The instruction <code>movl   $15, %edx</code> loads the decimal value 15 into <code>%edx</code>.  Remember that <code>%edx</code> is the lower 32 bits of <code>%rdx</code> which is the 3rd function argument register in the ABI.  No we have all three arguments to <code>objc_msgSend</code> taken care of; and we call it.</p>

<h4>Step 5 - Calling <code>printBar</code></h4>

<p>Starting to get the hang of this?  Let&#8217;s look at how we call a method on our <code>Foo</code> instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000e1f</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="mh">0x100000e22</span><span class="o">:</span>  <span class="n">movq</span>   <span class="mi">823</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsi</span>           <span class="p">;</span> <span class="s">&quot;printBar&quot;</span>
</span><span class='line'><span class="mh">0x100000e29</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000e2c</span><span class="o">:</span>  <span class="n">callq</span>  <span class="o">*%</span><span class="n">r15</span>
</span></code></pre></td></tr></table></div></figure>


<p>The instruction pair <code>0x100000e1f:  movq   %rax, %rbx</code> and <code>0x100000e29:  movq   %rbx, %rdi</code> move the <code>Foo</code> instance returned by the <code>initWithBar:</code> method to <code>%rdi</code>.  So the instance, then, is our first function argument.  Then we load a reference to <code>printBar</code> into <code>%rsi</code> as our second function argument.  Finally, we call <code>objc_msgSend</code> again.  (It&#8217;s stub location was already loaded in <code>%r15</code>.)</p>

<h4>Step 6 - Cleaning up our <code>Foo</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000e2f</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000e32</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000e5e</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_release</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we created an instance of <code>Foo</code>, we have to release it.  Recall that ARC inserts retains and releases for us as needed.  Here&#8217;s an example of that.  From Step 5, recall that <code>%rbx</code> has a reference to our instance.  The instruction <code>movq   %rbx, %rdi</code> sets it up as a first function argument.  Next we call <code>objc_release</code></p>

<h4>Step 7 - Cleaning up from our function</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000e37</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">r14</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000e3a</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000e4c</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_autoreleasePoolPop</span>
</span><span class='line'><span class="mh">0x100000e3f</span><span class="o">:</span>  <span class="n">xorl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="mh">0x100000e41</span><span class="o">:</span>  <span class="n">addq</span>   <span class="err">$</span><span class="mi">8</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="mh">0x100000e45</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="mh">0x100000e46</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">r14</span>
</span><span class='line'><span class="mh">0x100000e48</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="mh">0x100000e4a</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000e4b</span><span class="o">:</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of our function clean-up is that same as in the prior installment of our tutorial series, popping the autorelease pool, restoring the stack and certain preserved registers.</p>

<h3>Conclusion</h3>

<p>In this tutorial, we dived into Objective-C objects and learned about method dispatch optimizations in the Objective-C runtime while getting still more practice in interpreting x86_64 assembly language on the Mac.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86_64 Assembly Language Tutorial: Part 2]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-2/"/>
    <updated>2012-11-23T05:34:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-2</id>
    <content type="html"><![CDATA[<p>In our <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">last installment</a> of our x86_64 assembler tutorial, we introduced the registers and walked through a simple C program and its assembly langugage counterpart.  This time, we&#8217;ll talk a little more about the effect of optimizations and while we&#8217;re at it, present some of the highlights of the application binary interface, the ABI.</p>

<p>Let&#8217;s start with our original code that we <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">presented last time</a>:</p>

<div><script src='https://gist.github.com/4135115.js?file='></script>
<noscript><pre><code>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        uint8_t i;
        for( i = 0; i &lt; 16; i++ ) {
            printf(&quot;i = %d\n&quot;,i);
        }
    }
    return 0;
}</code></pre></noscript></div>


<h3>Optimization setting - -O, O1</h3>

<p><img class="left" src="http://i.imgur.com/O9LQR.png" title="'Figure 1: Optimization setting'" >
This time, we&#8217;re going to set the optimizations differently to see what effect it has on the code.  Recall that we ran with no optimizations the first time.  If you want to follow along in Xcode, then just create a command-line application project and search for &#8216;optimization&#8217; in the target build settings.</p>

<p><img class="right" src="http://i.imgur.com/NcgDW.png" title="'Figure 2: Disassembly assistant setting'" >
Paste the code above into <code>main.m</code> to replace the code that&#8217;s autogenerated by the template; and place a breakpoint on the return line.  We won&#8217;t be able to see the disassembly code unless the application is actually running; so we want to break somewhere accordingly.  We can view either the assembly or disassembly code.  We&#8217;re going to look at the former because the latter contains a lot of debugging symbols that make it harder to understand what we&#8217;re really interested in - the instructions.  To show the disassembly results, build and run the project.  When the debugger stops on the return line, show the Assistant editor which splits the main viewer into two panes.  In the right pane, select Disassembly as the assistant pane content.  If you&#8217;re not with me, then you may want to take a while to get familiar with the Xcode 4.x interface so that you can configure it the way you want.</p>

<h3>Disassembler code</h3>

<p>The disassembler takes the machine code that your C code generated and expresses it symbolically in assembly langugage.  Let&#8217;s take a look at the results and compare it to the results from the <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">last tutorial</a>.</p>

<div><script src='https://gist.github.com/4135317.js?file='></script>
<noscript><pre><code>0x100000ee0:  pushq  %rbp
0x100000ee1:  movq   %rsp, %rbp
0x100000ee4:  pushq  %r15
0x100000ee6:  pushq  %r14
0x100000ee8:  pushq  %rbx
0x100000ee9:  pushq  %rax
0x100000eea:  callq  0x100000f2e               ; symbol stub for: objc_autoreleasePoolPush
0x100000eef:  movq   %rax, %r14
0x100000ef2:  xorl   %ebx, %ebx
0x100000ef4:  leaq   111(%rip), %r15           ; &quot;i = %d\n&quot;
0x100000efb:  nopl   (%rax,%rax)
0x100000f00:  movq   %r15, %rdi
0x100000f03:  movl   %ebx, %esi
0x100000f05:  xorb   %al, %al
0x100000f07:  callq  0x100000f34               ; symbol stub for: printf
0x100000f0c:  incl   %ebx
0x100000f0e:  cmpb   $16, %bl
0x100000f11:  jne    0x100000f00               ; main + 32 at main.m:17
0x100000f13:  movq   %r14, %rdi
0x100000f16:  callq  0x100000f28               ; symbol stub for: objc_autoreleasePoolPop
0x100000f1b:  xorl   %eax, %eax
0x100000f1d:  addq   $8, %rsp
0x100000f21:  popq   %rbx
0x100000f22:  popq   %r14
0x100000f24:  popq   %r15
0x100000f26:  popq   %rbp
0x100000f27:  ret    </code></pre></noscript></div>


<h3>Step-by-step</h3>

<p>And just like we did before, let&#8217;s look at the code step-by-step.  This time we&#8217;re going to compare it to the code with no optimizations from last time, so you may want to be familiar with it first.</p>

<h4>Step 1 - Preamble</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ee0</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000ee1</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the same function preamble as before, saving the current base pointer and moving the stack pointer to the base pointer register.</p>

<h4>Step 2 - Save the registers</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ee4</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="mh">0x100000ee6</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">r14</span>
</span><span class='line'><span class="mh">0x100000ee8</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="mh">0x100000ee9</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rax</span>
</span></code></pre></td></tr></table></div></figure>


<p>We push several 64-bit registers to the stack.  We don&#8217;t know yet; but probably this is because we&#8217;re going to use them later on.  Let&#8217;s see what&#8217;s next.</p>

<h4>Step 3 - Start the autorelease pool</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000eea</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f2e</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_autoreleasePoolPush</span>
</span><span class='line'><span class="mh">0x100000eef</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set up the autorelease pool for the function as before.  This time, we&#8217;re saving the return value - a reference to the autorelease pool, presumably - to <code>%r14</code>.  We&#8217;ll set it again later before we pop the autorelease pool.  But before we do, it&#8217;s a good time to present some of the register allocations from the <a href="http://www.x86-64.org/documentation/abi.pdf">x86_64 ABI</a>.  The ABI exists to create some standardization in the way that assembly code interacts with the machine.  Part of that specification are standards that determine which registers are used for a given purpose.  We&#8217;ll present them here:</p>

<table>
<thead>
<tr>
<th>Register  </th>
<th> Usage                                                           </th>
<th> Preserved across function calls</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%rax</code>    </td>
<td> 1st return register, number of vector registers used            </td>
<td> No</td>
</tr>
<tr>
<td><code>%rbx</code>    </td>
<td> callee-saved register; base pointer                             </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%rcx</code>    </td>
<td> pass 4th integer argument to functions                          </td>
<td> No</td>
</tr>
<tr>
<td><code>%rdx</code>    </td>
<td> pass 3rd argument fo functions, 2nd return register             </td>
<td> No</td>
</tr>
<tr>
<td><code>%rsp</code>    </td>
<td> stack pointer                                                   </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%rbp</code>    </td>
<td> callee-saved register, frame pointer                            </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%rsi</code>    </td>
<td> used to pass 2nd argument to functions                          </td>
<td> No</td>
</tr>
<tr>
<td><code>%rdi</code>    </td>
<td> used to pass 1st argument to functions                          </td>
<td> No</td>
</tr>
<tr>
<td><code>%r8</code>     </td>
<td> used to pass 5th argunent to functions                          </td>
<td> No</td>
</tr>
<tr>
<td><code>%r9</code>     </td>
<td> used to pass 6th argument to functions                          </td>
<td> No</td>
</tr>
<tr>
<td><code>%r10</code>    </td>
<td> temp register, used for passing a function&#8217;s static chain ptr   </td>
<td> No</td>
</tr>
<tr>
<td><code>%r11</code>    </td>
<td> temp register                                                   </td>
<td> No</td>
</tr>
<tr>
<td><code>%r12</code>    </td>
<td> callee-saved register                                           </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%r13</code>    </td>
<td> callee-saved register                                           </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%r14</code>    </td>
<td> callee-saved register                                           </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%r15</code>    </td>
<td> callee-saved register                                           </td>
<td> Yes</td>
</tr>
<tr>
<td><code>%xmm0</code>   </td>
<td> used to pass and return floating point arguments                </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm1</code>   </td>
<td> used to pass and return floating point arguments                </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm2</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm3</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm4</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm5</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm6</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm7</code>   </td>
<td> used to pass floating point arguments                           </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm8</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm9</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm10</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm11</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm12</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm13</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm14</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%xmm15</code>  </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx0</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx1</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx2</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx3</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx4</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx5</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx6</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%mmx7</code>   </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st0</code>    </td>
<td> temporary register, used to return long double arguments        </td>
<td> No</td>
</tr>
<tr>
<td><code>%st1</code>    </td>
<td> temporary register, used to return long double arguments        </td>
<td> No</td>
</tr>
<tr>
<td><code>%st2</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st3</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st4</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st5</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st6</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
<tr>
<td><code>%st7</code>    </td>
<td> temporary register                                              </td>
<td> No</td>
</tr>
</tbody>
</table>


<p>Whew! Got that memorized yet?  Oh well, let&#8217;s move on.</p>

<h4>Step 4 - Idiom for clearing register</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ef2</span><span class="o">:</span>  <span class="n">xorl</span>   <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">ebx</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a curious instruction, XOR long <code>%ebx</code> with itself.  Self-XOR has the effect of clearing the register which on some processors is faster than <code>movl $0, %ebx</code>.  If we&#8217;re setting something to zero, I wonder if the compiler is using <code>%ebx</code> as the loop index.  We shall see&#8230;</p>

<h4>Step 5 - Obtain format string address</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ef4</span><span class="o">:</span>  <span class="n">leaq</span>   <span class="mi">111</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">r15</span>           <span class="p">;</span> <span class="s">&quot;i = %d</span><span class="se">\n</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This instruction reads &#8220;load effective address 64-bit into <code>%15</code>&#8221;.  We&#8217;re just grabbing the format string from a particular location in memory relative to the instruction pointer.</p>

<h4>Step 6 - Alignment</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000efb</span><span class="o">:</span>  <span class="n">nopl</span>   <span class="p">(</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an optimization that does nothing other than align the code properly for the jump target so that it can be fetched in a single cacheline request.</p>

<h4>Step 7 - Setting up call to <code>printf</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f00</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">r15</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000f03</span><span class="o">:</span>  <span class="n">movl</span>   <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'><span class="mh">0x100000f05</span><span class="o">:</span>  <span class="n">xorb</span>   <span class="o">%</span><span class="n">al</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'><span class="mh">0x100000f07</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f34</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember from the ABI register usage table above that <code>%rdi</code> is used to pass the first argument to functions.  In this case, the format string is the first argument of <code>printf</code>.  Earlier in Step 5, we loaded the address of the string into <code>%r15</code>; now we&#8217;re moving it to <code>%rdi</code> in preparation for the <code>printf</code> function call.  Next, <code>movl   %ebx, %esi</code> - remember earlier we wondered if the compiler was using <code>%esi</code> as the loop index?  From the reference table above, <code>%rsi</code> is used to pass the second function parameter; so this instruction passes the second parameter which is the loop index <code>i</code> in the C code.</p>

<p><code>xorb   %al, %al</code> clears the <code>%al</code> register which is the lowest 8 bits of <code>%rax</code> which is the register that passes the number of vector arguments.  As in the prior tutorial, since we are printing an integer, we don&#8217;t need a vector register.  Hence, we clear <code>%al</code>.</p>

<h4>Step 8 - Increment, compare, and jump</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f0c</span><span class="o">:</span>  <span class="n">incl</span>   <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'><span class="mh">0x100000f0e</span><span class="o">:</span>  <span class="n">cmpb</span>   <span class="err">$</span><span class="mi">16</span><span class="p">,</span> <span class="o">%</span><span class="n">bl</span>
</span><span class='line'><span class="mh">0x100000f11</span><span class="o">:</span>  <span class="n">jne</span>    <span class="mh">0x100000f00</span>               <span class="p">;</span> <span class="n">main</span> <span class="o">+</span> <span class="mi">32</span> <span class="n">at</span> <span class="n">main</span><span class="p">.</span><span class="n">m</span><span class="o">:</span><span class="mi">17</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order, we increment the register we&#8217;re using for the loop index, compare its lower 8 bits to decimal 16 with a byte compare instruction and jump if not equal back to Step 7.</p>

<h4>Step 9 - Pop the autorelease pool</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f13</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">r14</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="mh">0x100000f16</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f28</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_autoreleasePoolPop</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recall that in Step 3 we saved a reference to the autorelease pool in <code>%r14</code>?  Now we move that reference back to <code>%rdi</code> which is used to pass the first argument to functions. (Is this sounding like a broken record now?)  Then we call objc_autoreleasePoolPop in the Objective-C runtime to release the autorelease pool.</p>

<h4>Step 10 - Setting up to return</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f1b</span><span class="o">:</span>  <span class="n">xorl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="mh">0x100000f1d</span><span class="o">:</span>  <span class="n">addq</span>   <span class="err">$</span><span class="mi">8</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="mh">0x100000f21</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="mh">0x100000f22</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">r14</span>
</span><span class='line'><span class="mh">0x100000f24</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">r15</span>
</span><span class='line'><span class="mh">0x100000f26</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000f27</span><span class="o">:</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all that&#8217;s left is just to clean up.  First we clear <code>%eax</code>.  Why now?  Since it&#8217;s the lower 32 bits of the first return register, we just clear it after returning from the last function call so that we can return 0 to <strong>our</strong> caller.</p>

<p>Next we add 8 to the stack pointer.  This is an interesting development.  Why do we manually adjust the stack pointer?  Take a look at the function setup.  Initially we pushed the following registers: <code>%rbp</code>, <code>%r15</code>, <code>%r14</code>, <code>%rbx</code> and <code>%rax</code>.  But if we pop <code>%rax</code> which is our 1st function return value register, then we risk blowing away the effects of clearing <code>%eax</code> that we just did in <code>0x100000f1b:  xorl   %eax, %eax</code>, right?  So instead of popping the value, we manually adjust the stack pointer before popping the other variables in the reverse order to that in which we pushed them to the stack.</p>

<p>Lastly, we return to the caller.</p>

<p>Again, we close another chapter in our x86_64 assembly tutorial for Mac.  We will continue to build on our knowledge base with slightly more complex tutorials as we progress; so stay tuned.  Here are some interesting and useful references for you:</p>

<ul>
<li><a href="http://www.x86-64.org/documentation/abi.pdf">x86_64 ABI reference</a></li>
<li><a href="http://www.cs.virginia.edu/~evans/cs216/guides/x86.html">x86 assembly guide</a></li>
<li><a href="http://cs.mtu.edu/~mmkoksal/blog/?x=entry:entry120116-130037">GNU assembler directives</a></li>
<li><a href="http://stackoverflow.com/questions/2647640/x86-assembly-idioms">x86 assembly idioms</a></li>
</ul>


<p>And of course, <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">Part I</a> or our tutorial.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86_64 Assembly Language Tutorial: Part 1]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/"/>
    <updated>2012-11-23T04:21:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1</id>
    <content type="html"><![CDATA[<p>The majority of the time, Cocoa developers work at a such a high level of abstraction that we almost forget that all of those abstractions ultimately interact with silicon at the level of machine language.  Few of us will ever need to write such performance-critical code that we need to hand-write assembly language code; but a rudimentary understanding of it will help developers understand how the compiler behaves and how our objects that live in the upper levels of abstraction actually work.  If for no other reason, a passing familiarity with x86_64 assembly language will comfort the developer a little when the debugger stops on some line of assembly code.  With that, let&#8217;s dive in.</p>

<p>Registers are the &#8220;variables&#8221; at a hardware level.  In the x86_64 architecture, the registers are 64 bits wide, of course; but they have 32, 16, and 8 bit sub-registers that are used for particular instructions.  The following table shows some of those relationships:</p>

<table>
<thead>
<tr>
<th>64-bit register </th>
<th> Lower 32 bits </th>
<th> Lower 16 bits </th>
<th> Lower 8 bits</th>
</tr>
</thead>
<tbody>
<tr>
<td>rax        </td>
<td> eax           </td>
<td> ax            </td>
<td> al</td>
</tr>
<tr>
<td>rbx             </td>
<td> ebx           </td>
<td> bx            </td>
<td> bl</td>
</tr>
<tr>
<td>rcx             </td>
<td> ecx           </td>
<td> cx            </td>
<td> cl</td>
</tr>
<tr>
<td>rdx             </td>
<td> edx           </td>
<td> dx            </td>
<td> dl</td>
</tr>
<tr>
<td>rsi             </td>
<td> esi           </td>
<td> si            </td>
<td> sil</td>
</tr>
<tr>
<td>rdi             </td>
<td> edi           </td>
<td> di            </td>
<td> dil</td>
</tr>
<tr>
<td>rbp             </td>
<td> ebp           </td>
<td> bp            </td>
<td> bpi</td>
</tr>
<tr>
<td>rsp             </td>
<td> esp           </td>
<td> sp            </td>
<td> spi</td>
</tr>
<tr>
<td>r8              </td>
<td> r8d           </td>
<td> r8w           </td>
<td> r8b</td>
</tr>
</tbody>
</table>


<p>(<code>r8</code>-<code>r15</code> follow the same convention.)  The <code>rip</code> register is the instruction pointer register which points to the instruction being executed.  As we go through this series, we&#8217;ll introduce more information about the x86_64 registers.  Before we move on, it&#8217;s important to note that although there are dozens of registers that the compiler can use, their use is restricted by several factors:</p>

<ol>
<li><strong>Width of register</strong> - an 8 bit register can&#8217;t hold a 64-bit value.  (Duh.)</li>
<li><strong>Instructions</strong> - instructions operate on certain types of registers.</li>
<li><strong>Application binary interface</strong> - this is the low-level equivalent of an API, specifying data types, widths, calling conventions, etc.</li>
</ol>


<p>Our example is a simple C program that prints the first 16 integers:</p>

<h3>C code</h3>

<div><script src='https://gist.github.com/4135115.js?file='></script>
<noscript><pre><code>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        uint8_t i;
        for( i = 0; i &lt; 16; i++ ) {
            printf(&quot;i = %d\n&quot;,i);
        }
    }
    return 0;
}</code></pre></noscript></div>


<p>We&#8217;ve compiled this using no optimizations to see how the compiler behaves when it can&#8217;t optimize.  In the next installment, we&#8217;ll take a look at the effect of optimizations on the compiled code.</p>

<h3>Disassembly</h3>

<div><script src='https://gist.github.com/4134960.js?file='></script>
<noscript><pre><code>0x100000eeb:  pushq  %rbp
0x100000eec:  movq   %rsp, %rbp
0x100000eef:  pushq  %r15
0x100000ef1:  pushq  %r14
0x100000ef3:  pushq  %rbx
0x100000ef4:  pushq  %rax
0x100000ef5:  callq  0x100000f34               ; symbol stub for: objc_autoreleasePoolPush
0x100000efa:  movq   %rax, %r14
0x100000efd:  xorl   %ebx, %ebx
0x100000eff:  leaq   104(%rip), %r15           ; &quot;i = %d\n&quot;
0x100000f06:  movq   %r15, %rdi
0x100000f09:  movl   %ebx, %esi
0x100000f0b:  xorb   %al, %al
0x100000f0d:  callq  0x100000f3a               ; symbol stub for: printf
0x100000f12:  incl   %ebx
0x100000f14:  cmpb   $16, %bl
0x100000f17:  jne    0x100000f06               ; main + 27 at main.m:17
0x100000f19:  movq   %r14, %rdi
0x100000f1c:  callq  0x100000f2e               ; symbol stub for: objc_autoreleasePoolPop
0x100000f21:  xorl   %eax, %eax
0x100000f23:  addq   $8, %rsp
0x100000f27:  popq   %rbx
0x100000f28:  popq   %r14
0x100000f2a:  popq   %r15
0x100000f2c:  popq   %rbp
0x100000f2d:  ret  </code></pre></noscript></div>


<h3>Step-by-step</h3>

<h4>Step 1</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ec0</span><span class="o">:</span>  <span class="n">pushq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000ec1</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a standard preamble for a C function.  <code>pushq %rbp</code> saves the base pointer to the stack so that it can be restored later (see <code>popq %rbp</code>…)  Then <code>movq %rsp, %rbp</code> copies <code>rsp</code> to <code>rbp</code> setting the base pointer (temporarily for our function) to the stack pointer.  That way we can push variables to the stack if our function requires it.</p>

<h4>Step 2</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ec4</span><span class="o">:</span>  <span class="n">subq</span>   <span class="err">$</span><span class="mi">48</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grow our stack 48 bytes upward.  The compiler evidently concluded that our function may need 48 bytes of stack space for its use.</p>

<h4>Step 3</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ec8</span><span class="o">:</span>  <span class="n">movl</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Store a 32-bit zero at the bottom of the stack.  As the stack grows, we use lower-numbered addresses in memory.  Here, the bottom four bytes of the stack are set to zero.  Presumably this is just to make sure we&#8217;ve cleared the stack that we are using.</p>

<h4>Step 4</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ecf</span><span class="o">:</span>  <span class="n">movl</span>   <span class="o">%</span><span class="n">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>edi</code> is the first integer argument register - and the lower 32 bits of <code>rdi</code> we are pushing this to the stack 8 bytes up.  Since we set the bottom 4 bytes to zero, we are ensuring that the 64 bit value now on the stack is just the value of <code>argc</code> from the C code.  Makes sense?</p>

<h4>Step 5</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ed2</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rsi</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;re saving <code>rsi</code> another 8 bytes up the stack.</p>

<h4>Step 6</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ed6</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f2e</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like the comment says, we&#8217;re calling the start of the autorelease pool.  Remember, we&#8217;re looking at the disassembly.  If we were looking at the assembly instead, we&#8217;d see something like this:  <code>callq _objc_autoreleasePoolPush</code></p>

<h4>Step 7</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000edb</span><span class="o">:</span>  <span class="n">movb</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">17</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s going on here?  We&#8217;re pushing a an 8-bit zero to a position 17 bytes up the stack.  I&#8217;ll bet this refers to initializing our <code>uint8_t</code> loop variable <code>i</code> to zero.  We&#8217;ll see in a minute.</p>

<h4>Step 8</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000edf</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">-</span><span class="mi">32</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;re moving the accumulator register <code>rax</code> to the stack.</p>

<h4>Step 9</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ee3</span><span class="o">:</span>  <span class="n">movzbl</span> <span class="o">-</span><span class="mi">17</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s an instruction that we haven&#8217;t seen yet: <code>movzbl</code>.  This instruction means &#8220;move byte to long&#8221; so we are moving a byte at <code>-17(%rbp)</code> (remember that was hypothesized to be our loop variable…) to the register <code>%eax</code> which, you will recall, is the lower 32 bits of <code>%rax</code>.  Since we&#8217;re moving it back off the stack, I wonder if we&#8217;re getting ready to compare it to our maximum loop index?</p>

<h4>Step 10</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ee7</span><span class="o">:</span>  <span class="n">cmpl</span>   <span class="err">$</span><span class="mi">16</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yep!  <code>cmpl</code> means &#8220;compare long&#8221;, so we are comparing decimal 16 to <code>%eax</code> the lower 32 bits of the accumulator - the place where we just pulled our byte-to-long off the stack.  Now we&#8217;d expect to see some conditional jump next, I think.</p>

<h4>Step 11</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000eec</span><span class="o">:</span>  <span class="n">jge</span>    <span class="mh">0x100000f14</span>               <span class="p">;</span> <span class="n">main</span> <span class="o">+</span> <span class="mi">84</span> <span class="n">at</span> <span class="n">main</span><span class="p">.</span><span class="n">m</span><span class="o">:</span><span class="mi">19</span>
</span></code></pre></td></tr></table></div></figure>


<p>And right again!</p>

<p>The <code>jge</code> instruction is &#8220;jump when greater than or equal to&#8221;; so if <code>%eax</code> is greater than or equal to 16, we&#8217;ll jump to <code>0x100000f14</code> which, if you look ahead pops our autorelease pool and restores the stack, etc. thereby finishing the function.</p>

<h4>Step 12</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ef2</span><span class="o">:</span>  <span class="n">leaq</span>   <span class="mi">113</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>           <span class="p">;</span> <span class="s">&quot;i = %d</span><span class="se">\n</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we reach this point, our comparison failed and the integer is under 16.  So all that was left to do in the C code is to print it.  In this case, we&#8217;re loading an address 113 decimal bytes ahead of our current instruction pointer into <code>%rdi</code>.  Without seeing what&#8217;s beyond the end of the function in memory and without the comment, we&#8217;d be lost.  But the disassembler gives us a comment that tells us that this points to the format string that we&#8217;ll use to print the integer value.  But why did the compiler chosse <code>%rdi</code> for the this argument?  The answer is buried in the <a href="http://www.x86-64.org/documentation/abi.pdf">x86_64 ABI</a> in the section 3.2.3. which states that register <code>%rdi</code> is used to pass the first argument to functions.</p>

<h4>Step 13</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000ef9</span><span class="o">:</span>  <span class="n">movzbl</span> <span class="o">-</span><span class="mi">17</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">esi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, our &#8220;move byte to long&#8221; instruction.  This time moving the integer value to <code>%esi</code>.  I bet that&#8217;s what <code>printf</code> is expecting as the integer argument.  Referring again to the <a href="http://www.x86-64.org/documentation/abi.pdf">x86_64 ABI</a>, <code>%rsi</code> is used to pass the second argument to functions.  Since <code>%esi</code> is the lower 32 bits of <code>%rsi</code>, this makes sense.</p>

<h4>Step 14</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000efd</span><span class="o">:</span>  <span class="n">movb</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the tricky bit to understand without references to the ABI.  <code>%rax</code> is used to pass information about the number of vector registers that are used.  It is also the 1st return register.  Register <code>%al</code> is the lower 8 bits of <code>%rax</code> so in this instruction we are setting the number of vector registers to zero.  Since we are simply printing an integer, no need for vector registers.</p>

<h4>Step 15</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000eff</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f34</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we find the call to <code>printf</code> after the setup.  In assembly, this would have been <code>callq _printf</code>.</p>

<h4>Step 16</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f04</span><span class="o">:</span>  <span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">36</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This action (which is not really necessary) is a &#8220;Spill&#8221;; if we look at the assembly it labels it as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">36</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>         <span class="err">##</span> <span class="mi">4</span><span class="o">-</span><span class="n">byte</span> <span class="n">Spill</span>
</span></code></pre></td></tr></table></div></figure>


<p>When optimizations are off, the compiler looks ahead and sees that we need <code>%eax</code> or one of its sub-registers and pushes it to the stack.  That is a Spill.</p>

<h4>Step 17</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f07</span><span class="o">:</span>  <span class="n">movb</span>   <span class="o">-</span><span class="mi">17</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">al</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we get the integer loop value at <code>-17(%rbp)</code> off the stack into <code>%al</code>.  The upcoming use of <code>%al</code> is the reason that the compiler spilled the 4 bytes of <code>%eax</code> in the last instruction.</p>

<h4>Step 18</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f0a</span><span class="o">:</span>  <span class="n">addb</span>   <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'><span class="mh">0x100000f0c</span><span class="o">:</span>  <span class="n">movb</span>   <span class="o">%</span><span class="n">al</span><span class="p">,</span> <span class="o">-</span><span class="mi">17</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, as expected, the increment and move back to the stack.</p>

<h4>Step 19</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f0f</span><span class="o">:</span>  <span class="n">jmpq</span>   <span class="mh">0x100000ee3</span>               <span class="p">;</span> <span class="n">main</span> <span class="o">+</span> <span class="mi">35</span> <span class="n">at</span> <span class="n">main</span><span class="p">.</span><span class="n">m</span><span class="o">:</span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the end of our loop.  Jump back to address <code>0x100000ee3</code> which is step 9 above and the setup for our loop index comparison.</p>

<h4>Step 20</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f14</span><span class="o">:</span>  <span class="n">movq</span>   <span class="o">-</span><span class="mi">32</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we get <code>%rdi</code> off the stack; this is the opposite of a Spill - a Reload.</p>

<h4>Step 21</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f18</span><span class="o">:</span>  <span class="n">callq</span>  <span class="mh">0x100000f28</span>               <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">objc_autoreleasePoolPop</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pop our Objective-C autorelease pool.</p>

<h4>Step 22</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f1d</span><span class="o">:</span>  <span class="n">movl</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that <code>%rax</code> is our first return register; so this instruction is simply setting our return to 0.</p>

<h4>Step 23</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="mh">0x100000f22</span><span class="o">:</span>  <span class="n">addq</span>   <span class="err">$</span><span class="mi">48</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="mh">0x100000f26</span><span class="o">:</span>  <span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mh">0x100000f27</span><span class="o">:</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restore the stack pointer and the base pointer. And return.</p>

<p>With that, our first installment on x86_64 comes to a close.  We hope this was a helpful first introduction to x86_64 assembly language and that you will find it useful in understanding and debugging your applications.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Factory Style Guide]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/10/30/style-guide/"/>
    <updated>2012-10-30T05:00:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/10/30/style-guide</id>
    <content type="html"><![CDATA[<h2>Style guide</h2>

<p>A consistent coding and project layout style is one of the keys to writing readable and maintainable software.  As has been pointed out before, even the solo developer works in a team along with his future self.  And your future self will thank you for writing readable code.</p>

<p>Here&#8217;s our style guide.  Many of the choices are arbitrary. The placement of braces, for example, follows a common - but by no means universal - convention.  But, arbitrary or not here&#8217;s how we organize our code.</p>

<h3>Project organization</h3>

<p>There are two layers of project-level organization that we deal with - <strong>IDE-level organization</strong> and <strong>file-system level organization</strong>.  Although Xcode is capable of organizing the project to any degree of granularity you want, relying <em>solely</em> on Xcode to organize the project leads to a catastrophic mess in the filesysem  with all of the classes, header files, and resources living in a jumbled mess.</p>

<p>Therefore, we begin a project with a basic degree of organization in the file system that is reflected in Xcode and provides a skeletal organization for the project as it develops.</p>

<p><img class="left" src="http://i.imgur.com/SG3Uf.png" title="'file system organization'" >  Before writing any code, we add the directories as depicted to the file system.  Any project template files that are generated automatically by Xcode are then moved into the appropriate directories in the file system.  At that point, we return to Xcode and delete the file references.  Then we drag all of the folders from the file system back into Xcode.  This establishes the basic structure in Xcode that parallels that in the file system.  As our project grows, we add the remaining hierarchical structure only in Xcode.  We adopted this practice after reading a post by Adrian Kosmacezewski entitled <a href="http://akosma.com/2009/07/28/code-organization-in-xcode-projects/">Code Organization in Xcode Projects</a>.  The approach he describes is for Xcode 3; but it works fine with modern versions of Xcode.  The work of setting up the initial organization needs to be done up-front before you write any code.  Otherwise, moving files into place in the file system becomes tedious.</p>

<p><img class="left" src="http://i.imgur.com/EZMkz.png" title="'Xcode organization'" ></p>

<h3>Naming conventions</h3>

<p>We adhere nearly completely to the Apple conventions on naming <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-BBCHBFAH">generally</a> and for <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF">methods</a>, <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingFunctions.html#//apple_ref/doc/uid/20001283-BAJGGCAD">functions</a>, and <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE">properties</a></p>

<p>Our company prefix is <code>CCF</code> for Cocoa Factory.  All public class names begin with the <code>CCF</code> prefix.  For non-public subclasses of class clusters, we use <code>_CCF</code> for the class prefix.</p>

<h3>Typography</h3>

<p>We use Menlo 11 pt typeface for coding in Xcode.  The syntax highlighting theme is <a href="https://github.com/mhallendal/spacedust-theme">Spacedust</a>.</p>

<p>All other typographical considerations follow Apple&#8217;s guidelines.  In other words, we use camel case without underscores or dashes to separate words.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">BOOL</span> <span class="n">canProvideData</span>     <span class="c1">//   CORRECT</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">can_provide_data</span>   <span class="c1">//    INCORRECT</span>
</span><span class='line'>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">PNGIsValid</span>         <span class="c1">//    CORRECT (well-known abbreviations can be capitalized)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Organization of the implementation file</h3>

<h4>Indentation</h4>

<p>Indentation is 4 spaces per level.</p>

<h4>Top-down</h4>

<p>We begin with a standard header block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   @file NAME_OF_FILE</span>
</span><span class='line'><span class="cm"> *   @author WHO_WROTE_THE_FILE (www.cocoafactory.com)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @date DATE_AND_TIME in this format: 2012-10-29 05:56:53</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @note Copyright 2012 Cocoa Factory, LLC.  All rights reserved</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, any files that should be imported.  The files should be listed in the following order:</p>

<ol>
<li>The <strong>class header</strong> file</li>
<li>Any <strong>framework</strong> headers that are required</li>
<li><strong>Model</strong> headers</li>
<li><strong>Controller</strong> headers</li>
<li><strong>Helper/Manager</strong> headers</li>
<li><strong>View</strong> headers</li>
</ol>


<p>After the <code>#import</code> statements, skip one line then declare any <code>#define</code> statements, followed by any static variable then static function declarations.  If the class declares a class extension, then it should appear next just before the <code>@implementation</code> block.</p>

<h4>Pragma marks</h4>

<p>We use <code>#pragma mark</code> to separate source code into sections.  The types of tags used will vary; but the following are standard:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Object lifecycle</span>
</span><span class='line'><span class="cp">#pragma mark - View lifecycle       </span><span class="c1">//  for view controller classes</span>
</span><span class='line'><span class="cp">#pragma mark - KVO                  </span><span class="c1">//  key-value observing</span>
</span><span class='line'><span class="cp">#pragma mark - Interface actions    </span><span class="c1">//  all IBActions go here</span>
</span><span class='line'><span class="cp">#pragma mark - Public               </span><span class="c1">//  all public methods go here</span>
</span><span class='line'><span class="cp">#pragma mark - Private              </span><span class="c1">//  all private methods go here</span>
</span><span class='line'><span class="cp">#pragma mark - NSTableViewDelegate  </span><span class="c1">//  each protocol that the class adopts gets its own #pragma mark block</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Private methods</h4>

<p>Do not use an underscore to indicate a private method.  We name private methods using the same conventions as public methods.  <em>(NOTE: We are in the process of changing older code to meet this guideline.  For years, we ignored Apple&#8217;s waning; but worries about collision finally compelled us to change.)</em></p>

<h3>Braces</h3>

<p>We follow the Kerninghan and Ritchie (K &amp; R) style of brace placement with the <code>else</code> statement getting its own line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">flag</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//  do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do something else</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Parenthesis</h3>

<p>The opening parenthesis touches its operator and is followed by a space.  The closing parenthesis is preceded by a space:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  CORRECT</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">flag</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  INCORRECT</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//  do something</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Instance variables</h3>

<p>Instance variables that are explicitly declared should have a preceding underscore character.</p>

<p>All instance variables are declared in the implementation file <em><strong>unless</strong></em> they are used by a subclass.  In the latter case, all of the instance variables should be declared in the class interface file, thereby keeping all of the ivars together.</p>

<h3>Protocols</h3>

<p>Protocols are always declared in their own header file.</p>

<h3>Method signatures</h3>

<p>The method signature should be left-justified with one space after the scope (the + or -).  There should be a space after each segment of the method and a space between the object type and the pointer * for method arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span><span class="p">;</span>    <span class="c1">//  CORRECT</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span><span class="p">;</span>     <span class="c1">//  INCORRECT - no space after the scope</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span><span class="p">;</span>   <span class="c1">//  INCORRECT - space after the colon</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span><span class="p">;</span>     <span class="c1">//  INCORRECT - no space between type and pointer *</span>
</span></code></pre></td></tr></table></div></figure>


<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use custom NSAttributedString attributes]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/10/29/how-to-use-custom-nsattributedstring-attributes/"/>
    <updated>2012-10-29T19:36:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/10/29/how-to-use-custom-nsattributedstring-attributes</id>
    <content type="html"><![CDATA[<h2>How to draw a custom attribute in <code>NSLayoutManager</code></h2>

<p>The Cocoa Text System is incredibly flexible; but not nearly as well-documented as it should be given its power.  The classes and methods themselves are completely documented as is the &#8220;big picture&#8221; - but there&#8217;s a lot of intermediate documentation that&#8217;s missing.</p>

<p>In this tutorial, we&#8217;ll build an app that draws a custom attribute in an <code>NSTextView</code> like this:</p>

<p><img src="http://i.imgur.com/mErdK.png" alt="CustomAttributeTestApp" /></p>

<p><code>NSAttributedString</code> is great for drawing standard attributes such as font, font size, foreground and background colors; but it gets more complicated when you need to some something that requires actual drawing.  This tutorial will show you how to do simple drawing of a custom attribute.</p>

<h3>Getting Started</h3>

<p>Download the <a href="https://github.com/cocoa-factory/CCFCustomAttributeTutorial/zipball/master">example project</a> from Github.  You need Xcode 4.5 for this project; so if you don&#8217;t have it - go update Xcode first.</p>

<h3><code>NSAttributedString</code> for decorated text</h3>

<p><code>NSAttributedString</code> and its mutable counterpart <code>NSMutableAttributedString</code> are used to draw decorated text.  Using these classes, you can create strings with attributes that describe how the string should look when drawn.  For example, you can add font and color attributes like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">sampleString</span> <span class="o">=</span> <span class="s">@&quot;This is a sample string&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">attributedString</span><span class="p">;</span>
</span><span class='line'><span class="n">attributedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">sampleString</span>
</span><span class='line'>                                                   <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span><span class="nl">NSFontSizeAttribute:</span><span class="err">@</span><span class="mi">24</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a string whose font size attribute is 24.0 pt.  And if we want to display the <code>attributedString</code> in an <code>NSTextView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSTextView</span> <span class="o">*</span><span class="n">textView</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">textView</span> <span class="nl">setAttributedString:</span><span class="n">attributedString</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the mutable variant <code>NSMutableAttributedString</code> you can add and remove attributes dynamically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;The quick brown fox&quot;</span>
</span><span class='line'>              <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span><span class="n">NSBackgroundColorAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">NSColor</span> <span class="n">yellowColor</span><span class="p">]}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>which will render like this:</p>

<p><img src="http://i.imgur.com/qMnbA.png" alt="background-color" /></p>

<p>Of course, you can also combine attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSColor</span> <span class="n">yellowColor</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">NSBackgroundColorAttributeName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSFont</span> <span class="o">*</span><span class="n">font</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFontManager</span> <span class="n">sharedFontManager</span><span class="p">]</span> <span class="nl">fontWithFamily:</span><span class="s">@&quot;Arial&quot;</span> <span class="nl">traits:</span><span class="mi">0</span> <span class="nl">weight:</span><span class="mi">5</span> <span class="nl">size:</span><span class="mi">24</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject:</span><span class="n">font</span> <span class="nl">forKey:</span><span class="n">NSFontAttributeName</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;The quick brown fox&quot;</span>
</span><span class='line'>                                                    <span class="nl">attributes:</span><span class="n">attributes</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="n">textView</span><span class="p">]</span> <span class="nl">insertText:</span><span class="n">string</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/J4EWm.png" alt="Combining attributes" /></p>

<h3><code>NSMutableAttributedString</code> tracks changes to its string</h3>

<p>If you want to change the underlying <code>NSMutableAttributedString</code> without disturbing its attributes, you can use its <code>mutableString</code> method to obtain an <code>NSMutableString</code> that you can manipulate behind its back, while the <code>NSMutableAttributedString</code> tracks the changes.  In fact the object you get back from <code>mutableString</code> is not actually an instance of <code>NSMutableString</code> but an instance of <code>NSMutableStringProxyForMutableAttributedString</code> instead.  This proxy object is responsible for the tracking behavior internally.</p>

<h3>What about custom attributes, then?</h3>

<p>Let&#8217;s get started building the custom attribute.  The drawing is done in the context of a layout manager - a subclass of <code>NSLayoutManager</code> Since our intent is to use our custom attribute in the context of an <code>NSTextView</code> we should look at the architecture of that class first.  <code>NSTextView</code> has a single text container in which is lays out text.  The <code>NSTextContainer</code> is a rectangular region in which to layout text.  Each <code>NSTextView</code> has a default text container, but it is possible to replace the text container using the <code>replaceTextContainer</code> method.  The text container uses a layout manager to layout and draw the text.  There is readonly access to the text container&#8217;s layout manager on <code>NSTextView</code>.  In order to give <code>NSTextView</code> a new layout manager, we have to set it on a new <code>NSTextContainer</code> object.</p>

<p>So let&#8217;s start with a custom text view that we&#8217;ll call <code>CCFTextView</code>.  You can find the source code in the &#8220;view&#8221; folder.  This text view basically does on thing - replace its <code>NSLayoutManager</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">CCFTextView</span> <span class="o">*</span><span class="nf">commonInit</span><span class="p">(</span><span class="n">CCFTextView</span> <span class="o">*</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//  set up our initial text size</span>
</span><span class='line'>    <span class="n">NSFont</span> <span class="o">*</span><span class="n">font</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFontManager</span> <span class="n">sharedFontManager</span><span class="p">]</span> <span class="nl">fontWithFamily:</span><span class="s">@&quot;Helvetica&quot;</span> <span class="nl">traits:</span><span class="mi">0</span> <span class="nl">weight:</span><span class="mi">5</span> <span class="nl">size:</span><span class="mf">24.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="n">NSFontAttributeName</span> <span class="o">:</span> <span class="n">font</span><span class="p">};</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setTypingAttributes:</span><span class="n">attributes</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  replace our layout manager with custom layout manager</span>
</span><span class='line'>    <span class="n">CCFCustomLayoutManager</span> <span class="o">*</span><span class="n">layoutManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CCFCustomLayoutManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSTextContainer</span> <span class="o">*</span><span class="n">textContainer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSTextContainer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">replaceTextContainer:</span><span class="n">textContainer</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">textContainer</span> <span class="nl">replaceLayoutManager:</span><span class="n">layoutManager</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>commonInit</code> function is called from either <code>initWithCoder:</code> or <code>initWithFrame:</code> so that no matter how the <code>CCFTextView</code> gets initialized, we replace its text container&#8217;s layout manager with our own subclass.  Let&#8217;s look at the <code>NSLayoutManager</code> subclass - <code>CCFCustomLayoutManager</code> in the &#8220;helpers+managers&#8221; directory.  In the header file &#8220;CCFCustomLayouManager.h&#8221; we define a few constants.  <code>CCFSpecialHighlighterAttributeName</code> is the name of our custom attribute and <code>CCFHighlightColorKey</code> and <code>CCFLineColorKey</code> are keys to the dictionary value of our attribute.</p>

<p>In the implementation of our layout manager, we override a single method <code>drawGlyphsForGlyphRange:atPoint:</code>.  Here we&#8217;ll digress about glyphs vs. characters.</p>

<h3>Glyphs versus characters</h3>

<p>The <strong>character</strong> can is the smallest unit of a written language that has meaning.  In Roman and other alphabets, it maps to a particular sound in the spoken counterpart of the written language.  However in the case of other languages, like Chinese, it can represent an entire word.</p>

<p>A <strong>glyph</strong> on the other hand is a graphically-concrete form of a character.</p>

<p><img src="http://i.imgur.com/3z2M5.png" alt="Glyphs-vs-characters" /></p>

<p>The distinction is important, because while we&#8217;re manipulating characters in our code, the text system is working behind the scenes laying out glyphs, not characters.  In this case, we need to do both.  That&#8217;s why out <code>NSLayoutManager</code> subclass overrides <code>drawGlyphsForGlyphRange:atPoint</code>.  So let&#8217;s look a little more closely at what we do in this method, which we&#8217;ll build up from pseudo-code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawGlyphsForGlyphRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">glyphsToShow</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="nv">origin</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     iterate over our glyph ranges</span>
</span><span class='line'><span class="cm">     map the glyph range back to the character range that it represents</span>
</span><span class='line'><span class="cm">     check if our attribute is set on the character range</span>
</span><span class='line'><span class="cm">     if attribute is set</span>
</span><span class='line'><span class="cm">         get the rect of where we should draw the glyph</span>
</span><span class='line'><span class="cm">         do our drawing</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, since we need to refer to the character sequence when we do the mapping, we need a source for that mapping.  Fortunately, <code>NSLayoutManager</code> keeps a reference to its <code>NSTextStorage</code> object.  This object is a subclass of <code>NSMutableAttributedString</code>.  We will get this reference and copy <code>glyphsToShow</code> to a local variable so that we can iterate over its span.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawGlyphsForGlyphRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">glyphsToShow</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="nv">origin</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">glyphRange</span> <span class="o">=</span> <span class="n">glyphsToShow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">glyphRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     map the glyph range back to the character range that it represents</span>
</span><span class='line'><span class="cm">     check if our attribute is set on the character range</span>
</span><span class='line'><span class="cm">     if attribute is set</span>
</span><span class='line'><span class="cm">         get the rect of where we should draw the glyph</span>
</span><span class='line'><span class="cm">         do our drawing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we take care of the glyph-to-character mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawGlyphsForGlyphRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">glyphsToShow</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="nv">origin</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">glyphRange</span> <span class="o">=</span> <span class="n">glyphsToShow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">glyphRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSRange</span> <span class="n">charRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">characterRangeForGlyphRange:</span><span class="n">glyphRange</span> <span class="nl">actualGlyphRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSRange</span> <span class="n">attributeCharRange</span><span class="p">,</span> <span class="n">attributeGlyphRange</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">attribute</span> <span class="o">=</span> <span class="p">[</span><span class="n">textStorage</span> <span class="nl">attribute:</span><span class="n">CCFSpecialHighlightAttributeName</span>
</span><span class='line'>                                      <span class="nl">atIndex:</span><span class="n">charRange</span><span class="p">.</span><span class="n">location</span> <span class="nl">longestEffectiveRange:</span><span class="o">&amp;</span><span class="n">attributeCharRange</span>
</span><span class='line'>                                      <span class="nl">inRange:</span><span class="n">charRange</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">glyphRangeForCharacterRange:</span><span class="n">attributeCharRange</span> <span class="nl">actualCharacterRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="n">NSIntersectionRange</span><span class="p">(</span><span class="n">attributeGlyphRange</span><span class="p">,</span> <span class="n">glyphRange</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     check if our attribute is set on the character range</span>
</span><span class='line'><span class="cm">     if attribute is set</span>
</span><span class='line'><span class="cm">         get the rect of where we should draw the glyph</span>
</span><span class='line'><span class="cm">         do our drawing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then to check if the attribute is set on this <code>charRange</code>, we just test for non-nil:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawGlyphsForGlyphRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">glyphsToShow</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="nv">origin</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">glyphRange</span> <span class="o">=</span> <span class="n">glyphsToShow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">glyphRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSRange</span> <span class="n">charRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">characterRangeForGlyphRange:</span><span class="n">glyphRange</span> <span class="nl">actualGlyphRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSRange</span> <span class="n">attributeCharRange</span><span class="p">,</span> <span class="n">attributeGlyphRange</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">attribute</span> <span class="o">=</span> <span class="p">[</span><span class="n">textStorage</span> <span class="nl">attribute:</span><span class="n">CCFSpecialHighlightAttributeName</span>
</span><span class='line'>                                      <span class="nl">atIndex:</span><span class="n">charRange</span><span class="p">.</span><span class="n">location</span> <span class="nl">longestEffectiveRange:</span><span class="o">&amp;</span><span class="n">attributeCharRange</span>
</span><span class='line'>                                      <span class="nl">inRange:</span><span class="n">charRange</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">glyphRangeForCharacterRange:</span><span class="n">attributeCharRange</span> <span class="nl">actualCharacterRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="n">NSIntersectionRange</span><span class="p">(</span><span class="n">attributeGlyphRange</span><span class="p">,</span> <span class="n">glyphRange</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">attribute</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">             get the rect of where we should draw the glyph</span>
</span><span class='line'><span class="cm">             do our drawing</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the drawing is the easiest part.  We just need to bracket our drawing code with calls to save then restore the <code>NSGraphicsContext</code> before drawing.  To get the rectangle in which our glyph is drawn, we ask for the <code>boundingRectForGlyphRange:inTextContainer:</code>.  Lastly, we have our completed implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawGlyphsForGlyphRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">glyphsToShow</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="nv">origin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">glyphRange</span> <span class="o">=</span> <span class="n">glyphsToShow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">glyphRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSRange</span> <span class="n">charRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">characterRangeForGlyphRange:</span><span class="n">glyphRange</span> <span class="nl">actualGlyphRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSRange</span> <span class="n">attributeCharRange</span><span class="p">,</span> <span class="n">attributeGlyphRange</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">attribute</span> <span class="o">=</span> <span class="p">[</span><span class="n">textStorage</span> <span class="nl">attribute:</span><span class="n">CCFSpecialHighlightAttributeName</span>
</span><span class='line'>                                      <span class="nl">atIndex:</span><span class="n">charRange</span><span class="p">.</span><span class="n">location</span> <span class="nl">longestEffectiveRange:</span><span class="o">&amp;</span><span class="n">attributeCharRange</span>
</span><span class='line'>                                      <span class="nl">inRange:</span><span class="n">charRange</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">glyphRangeForCharacterRange:</span><span class="n">attributeCharRange</span> <span class="nl">actualCharacterRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">attributeGlyphRange</span> <span class="o">=</span> <span class="n">NSIntersectionRange</span><span class="p">(</span><span class="n">attributeGlyphRange</span><span class="p">,</span> <span class="n">glyphRange</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">attribute</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">NSGraphicsContext</span> <span class="n">saveGraphicsState</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSColor</span> <span class="o">*</span><span class="n">bgColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">objectForKey:</span><span class="n">CCFHighlightColorKey</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSColor</span> <span class="o">*</span><span class="n">lineColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">objectForKey:</span><span class="n">CCFLineColorKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSTextContainer</span> <span class="o">*</span><span class="n">textContainer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textContainers</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSRect</span> <span class="n">boundingRect</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">boundingRectForGlyphRange:</span><span class="n">attributeGlyphRange</span> <span class="nl">inTextContainer:</span><span class="n">textContainer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="n">bgColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSRectFill</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSRect</span> <span class="n">bottom</span> <span class="o">=</span> <span class="n">NSMakeRect</span><span class="p">(</span><span class="n">NSMinX</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">),</span> <span class="n">NSMaxY</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">)</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">NSWidth</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">),</span> <span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>            <span class="p">[</span><span class="n">lineColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSRectFill</span><span class="p">(</span><span class="n">bottom</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSRect</span> <span class="n">topRect</span> <span class="o">=</span> <span class="n">NSMakeRect</span><span class="p">(</span><span class="n">NSMinX</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">),</span> <span class="n">NSMinY</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">),</span> <span class="n">NSWidth</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">NSRectFill</span><span class="p">(</span><span class="n">topRect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="n">super</span> <span class="nl">drawGlyphsForGlyphRange:</span><span class="n">attributeGlyphRange</span> <span class="nl">atPoint:</span><span class="n">origin</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">NSGraphicsContext</span> <span class="n">restoreGraphicsState</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">super</span> <span class="nl">drawGlyphsForGlyphRange:</span><span class="n">glyphsToShow</span> <span class="nl">atPoint:</span><span class="n">origin</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">glyphRange</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="n">NSMaxRange</span><span class="p">(</span><span class="n">glyphRange</span><span class="p">)</span> <span class="o">-</span> <span class="n">NSMaxRange</span><span class="p">(</span><span class="n">attributeGlyphRange</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glyphRange</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">NSMaxRange</span><span class="p">(</span><span class="n">attributeGlyphRange</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting attributes</h3>

<p>Let&#8217;s turn our attention to <code>CCFMainWindowController</code> where our attributes are being managed.  When the user presses the highlight button, we want to tell the text view to apply our attribute to the selection - which is what we do in <code>setCustomAttribute:</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">setCustomAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//  add our custom attribute to the selected range</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">selectedRange</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">textView</span><span class="p">]</span> <span class="n">selectedRange</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">textStorage</span> <span class="nl">addAttribute:</span><span class="n">CCFSpecialHighlightAttributeName</span> <span class="nl">value:</span><span class="p">[</span><span class="n">self</span> <span class="n">attributeColors</span><span class="p">]</span> <span class="nl">range:</span><span class="n">selectedRange</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Private</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  return dictionary of highlight and line colors for our custom attribute&#39;s value</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributeColors</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">@</span><span class="p">{</span>  <span class="n">CCFHighlightColorKey</span> <span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">highlightColorWell</span><span class="p">.</span><span class="n">color</span><span class="p">,</span> <span class="n">CCFLineColorKey</span> <span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">lineColorWell</span><span class="p">.</span><span class="n">color</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code in <code>CCFMainWindowController</code> is for setup and for observing for changes in the highlight and line colors.  Using Key-value observing, we are able to detect when the colors change and re-do our markup accordingly.</p>

<p>Athough here&#8217;s much more to the text system in Cocoa you should have a good starting point for custom attributes.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Target conditionals]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/10/04/target-conditionals/"/>
    <updated>2012-10-04T14:04:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/10/04/target-conditionals</id>
    <content type="html"><![CDATA[<p>If you hang out on Stack Overflow long enough, you&#8217;re bound to see a few questions about target conditionals like <a href="http://stackoverflow.com/questions/12132933/preprocessor-macro-for-os-x-targets">this one - Preprocessor macro for OS X targets</a>; so here&#8217;s an attempt to sort it out:</p>

<h2>How do you conditionally compile for Mac and iOS platforms?</h2>

<p>This one is a little confusing because <code>TARGET_MAC_OS</code> doesn&#8217;t really do what you think.</p>

<table>
<thead>
<tr>
<th>  Conditional                  </th>
<th> Mac OS </th>
<th> iOS device </th>
<th> iOS sim</th>
</tr>
</thead>
<tbody>
<tr>
<td>  <code>TARGET_OS_MAC</code>              </td>
<td>   X    </td>
<td>    X       </td>
<td>    X    </td>
</tr>
<tr>
<td>  <code>TARGET_OS_IPHONE</code>           </td>
<td>        </td>
<td>    X       </td>
<td>    X    </td>
</tr>
<tr>
<td>  <code>TARGET_OS_EMBEDDED</code>         </td>
<td>        </td>
<td>    X       </td>
<td>         </td>
</tr>
<tr>
<td>  <code>TARGET_OS_IPHONE_SIMULATOR</code> </td>
<td>        </td>
<td>            </td>
<td>    X    </td>
</tr>
</tbody>
</table>


<p>(Credits to Greg Parker, <a href="http://www.sealiesoftware.com/blog/archive/2010/8/16/TargetConditionalsh.html"><em>Hamster Emporium Target Conditionals</em></a> for the table)</p>

<p>If you have one block of code for Mac and another for iOS, the trick is to place the iOS condition first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#if TARGET_OS_IPHONE</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">dataString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">&quot;data = %d&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="c1">// this compiles on Mac OS</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">dataString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">&quot;data = %ld&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How I support multiple iOS or Mac versions?</h2>

<p>Usually this means that the developer wants to incorporate features in a new OS version while maintaing backwards compatibility.  The solution has a few steps:</p>

<ul>
<li>Set the base SDK on the target build setting to the newest vesion that you need.</li>
<li>Set the deployment target to the oldest version that you support</li>
</ul>


<p>Having set the target build settings, we have to do some work in the code.  Let&#8217;s say we want to incorporate iOS 5 features in an app that should support earlier versions, say iOS 4.3.  Then we&#8217;ll set the base SDK to iOS 5+ and the deployment target to iOS 4.3.  In the code, we do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 50000</span>
</span><span class='line'><span class="cp">// compile this when the target base SDK is iOS 5.0 or greater.  </span>
</span><span class='line'><span class="cp">// We use this as a compile-time test to prevent errors if we </span>
</span><span class='line'><span class="cp">// try to recompile the project with a lower base SDK setting</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, we will be able to compile for platforms between the OS ranges specified by our lower boundary of the deployment target and our upper boundary of the base SDK.  But what happens at runtime?  We&#8217;ll crash on any features above our deployment target; so we need a runtime check for class availability.  As of the iOS 4.2 SDK, you should use the <code>NSObject</code> <code>class</code> method to check for the availability of weakly linked classes at runtime.  This takes advantage of the <code>NS_CLASS_AVAILABLE</code> macro; so in our example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 50000</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="p">[</span><span class="n">CIImage</span> <span class="n">class</span><span class="p">]</span>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// CIImage is available in iOS 5.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first check is a compile-time check to ensure that we can compile on lower SDK&#8217;s and the second check is a runtime check to ensure that the weakly linked <code>CIImage</code> class is available on the device where the app is running.  Of course, we can also test for method availability instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 50000</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">someNewMethod</span><span class="p">)]</span>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we can use fancy new method on UIImage</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What is <code>__IPHONE_OS_VERSION_MIN_REQUIRED?</code></h2>

<p>Unless you set it yourself, the compiler will set it to your target deployment version.  Same for <code>__MAC_OS_VERSION_MIN_REQUIRED</code>.  But you probably guessed that already.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CCFBrowserTextField]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/21/introducing-ccfbrowsertextfield/"/>
    <updated>2012-09-21T06:10:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/21/introducing-ccfbrowsertextfield</id>
    <content type="html"><![CDATA[<p>We just released <code>CCFBrowserTextField</code> for public consumption.  Take a look at <a href="https://github.com/cocoa-factory/CCFBrowserTextField">our github repository</a> to get started using it.  Here&#8217;s what this <code>NSTextField</code> subclass looks like:</p>

<p><img class="right" src="http://i46.tinypic.com/2nlz5ah.jpg"></p>

<p>That&#8217;s it.  A text field with an embedded document-like icon.  The intent is to provide a way of browsing to a path that should be contained in the text field without an external button.  It was inspired both a desire for a more compact, connected UI and by seeing someone else who had done something similar.  In the amazing <a href="https://github.com/omnigroup/OmniGroup">Omni Frameworks</a> in OmniAppKit framework, you&#8217;ll find a number of interesting widgets.  They created a text field with a calendar button that popups up a calendar picker.  We liked the idea and learned a lot about how text fields work, then adapted it to meet our needs.  By the way, Omni writes great software besides putting their frameworks out for public use.  I use at least one of their pieces of software every day.</p>

<h3>Using <code>CCFBrowserTextField</code></h3>

<p>If you want to use <code>CCFBrowserTextField</code> just go to the <a href="https://github.com/cocoa-factory/CCFBrowserTextField">github repository</a> and download it.  When you want to use it, just insert an <code>NSTextField</code> object into your interface and set its class type to <code>CCFBrowserTextField</code>.  For the button to be active, you just need to provide it with an action block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="n">browserTextField</span><span class="p">]</span> <span class="nl">setActionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// do something here like launch NSOpenPanel etc.</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>[self browserTextField]</code> is a property with an IBOutlet to your custom text field.</p>

<h3>Creating a custom <code>NSTextField</code></h3>

<p>This part is a bit like the &#8220;Making of &#8230;&#8221; that comes with DVD&#8217;s.  If you want to get under the hood and learn a little about developing for Mac OS, here&#8217;s your chance.  (We&#8217;ve been developing so much for iOS that some of the older parts of Mac, like <code>NSCell</code> are a little foreign to us.)</p>

<p>Let&#8217;s start from the inside out.</p>

<h4>Drawing into an image</h4>

<p>Where possible we favor drawing into an <code>NSView</code> or in this case <code>NSImage</code> rather than loading images from the bundle.  This makes adapting to resolution changes like the Retina transition easier for us.  We use <a href="http://www.paintcodeapp.com/">PaintCode</a> to generate the drawing code from vector drawings on-screen.  It&#8217;s a great piece of software.</p>

<p>Let&#8217;s take a look at the process of drawing into an image.  I&#8217;m going to focus on just that aspect rather than the Core Graphics details.  In the <code>CCFBrowserTextFieldButtonImage</code> implementation we have one public method <code>init</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">self</span> <span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">NSMakeSize</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_drawIcon</span><span class="p">(</span><span class="n">self</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important thing to remember here is to set the size of the image before attempting to draw into it <code>self.size = ...</code>.  Then we call <code>_drawIcon:</code> on ourself.</p>

<p>Drawing into the <code>NSImage</code> is a three step process.  First we lock focus on ourself.  This prepares the image for drawing.  More specifically, it sets the current graphics context to the area of the offscreen window that is used to cache the <code>NSImage</code> contents.  All of the drawing until we call <code>unlockFocus</code> is composited to the offscreen window.  In step 2, we draw the image.  I&#8217;m not going to go through each shape in this post - but you can get a feel for how the image is built up.  Finally, we unlock focus which resotores the focus to the previous owner.  That&#8217;s it for drawing the image.  But the image has to go somewhere, right?  Next up, <code>CCFBrowserTextFieldButton</code></p>

<h3>An embeddable button</h3>

<p>Next up in our inside-out tour is <code>CCFBrowserTextFieldButton</code>.  Starting with the class interface, we see block type definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">CCFBrowserButtonBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the typedef for the block used as an action for the button.  More on this in a minute.  Next up the class method(s):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSSize</span><span class="p">)</span><span class="nf">browserImageSize</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class users will use this method to get information about the size of the image in the button.  Some of the upstream users will need to know how large our image is to provide for cursor changes and text formatting in the fields.</p>

<p>Finally we have a couple methods to set the frame and/or the action handler.  On to the implementation, let&#8217;s look at the <code>initWithFrame:</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">self</span> <span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setButtonType:</span><span class="n">NSMomentaryPushInButton</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setBordered:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setImage:</span><span class="n">browserImage</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setImagePosition:</span><span class="n">NSImageOnly</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setAutoresizingMask:</span><span class="n">NSViewMinXMargin</span> <span class="o">|</span> <span class="n">NSViewMinYMargin</span> <span class="o">|</span> <span class="n">NSViewMaxYMargin</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&#8217;re just defining the basic properties of the button.  We want the button to be an ordinary momentary push in button, without borders, with our specified image, and positioning the image as an image only button.  So where does the image come from?  We declare some static variables in the implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSImage</span> <span class="o">*</span><span class="n">browserImage</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSSize</span> <span class="n">browserImageSize</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we set them up in the <code>initialize</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">browserImage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CCFBrowserTextFieldButtonImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">browserImageSize</span> <span class="o">=</span> <span class="n">browserImage</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And by the way, we&#8217;re using ARC throughout.  So should you.  We were reference counting  gurus before ARC; but ARC is too good to ignore.</p>

<p>Finally, we have a pair of methods that set the <code>frame</code> and the <code>_actionBlock</code>  Because <code>NSButton</code> doesn&#8217;t have a blocks-based action handler, we extended it by setting its <code>target</code> to <code>self</code> and the <code>action</code> to a method that just calls the action block.  On to the cell.</p>

<h3>A digression on why controls have cells</h3>

<p>Newcomers to Mac OS X are often perplexed by the existence of <code>NSCell</code>.  It&#8217;s like <code>NSView</code>, but not really.  It&#8217;s associated with <code>NSControl</code>, but why?</p>

<p>Basiclaly <code>NSCell</code> is just a lightweight view.  Take the example of <code>NSTableView</code>, in the old days, its cells were always made up of <code>NSCell</code> because the size of its instance was less than a view; and using a lighter weight object made tremendous difference in memory savings.  So, most controls are backed by an <code>NSCell</code> that handles much of the lower-level work of the control.</p>

<h3>So, our cell</h3>

<p>To take care of some drawing bits, we subclass <code>NSTextFieldCell</code>.  Here&#8217;s how it works:  By overriding <code>-titleRectForBounds:</code> we have the opportunity to modify the region in which our text can be drawn.  Ordinarily the cell takes the insert area of the field to draw the text minus a little inset.  In our case, we want to give plenty of room for the button.  So we do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nf">titleRectForBounds:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">bounds</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSRect</span> <span class="n">buttonRect</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">class</span><span class="p">]</span> <span class="nl">rectForBrowserFrame:</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">horizontalEdgeGap</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="n">NSWidth</span><span class="p">(</span><span class="n">buttonRect</span><span class="p">)</span> <span class="o">+</span> <span class="n">horizontalEdgeGap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bounds</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get the frame of the button in our bounds, then move the width accordingly.</p>

<h3>And, last but not least, <code>CCFBrowserTextField</code></h3>

<p>The outermost component is the field itself.  There are a few things we need to take care of here.  For example we have to add the button itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">_initTextFieldCompletion</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">_browserButton</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSSize</span> <span class="n">browserImageSize</span> <span class="o">=</span> <span class="p">[</span><span class="n">CCFBrowserTextFieldButton</span> <span class="n">browserImageSize</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSRect</span> <span class="n">buttonFrame</span> <span class="o">=</span> <span class="n">NSMakeRect</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">browserImageSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">browserImageSize</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_browserButton</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CCFBrowserTextFieldButton</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">buttonFrame</span><span class="p">];</span>
</span><span class='line'>        <span class="n">buttonFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">CCFBrowserTextFieldCell</span> <span class="nl">rectForBrowserFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">_setCellClass</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">_browserButton</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">autoresizesSubviews</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_browserButton</span> <span class="nl">setFrame:</span><span class="n">buttonFrame</span> <span class="nl">actionHandler:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;pushed&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We instantiate the <code>_browserButton</code> lazily here, first getting the size of its image, then setting its frame accordingly.  We set the class of the cell our field uses directly.  More on that in a moment.  Then we add the button and set a silly default handler.  If you want the button to do something meaningful, you&#8217;ll have to set the field&#8217;s action handler.</p>

<p>Now we have to tell our custom field to use <strong>our</strong> cell and not the default cell for the superclass.  This is what we&#8217;re doing here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_setCellClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">customClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">CCFBrowserTextFieldCell</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// since we are switching the isa pointer, we need to guarantee that the class layout in memory is the same</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">class_getInstanceSize</span><span class="p">(</span><span class="n">customClass</span><span class="p">)</span> <span class="o">==</span> <span class="n">class_getInstanceSize</span><span class="p">(</span><span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">customClass</span><span class="p">)),</span> <span class="s">@&quot;Incompatible class assignment&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// switch classes if we are not already switched</span>
</span><span class='line'>    <span class="n">NSCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">cell</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="p">[</span><span class="n">cell</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">CCFBrowserTextFieldCell</span> <span class="n">class</span><span class="p">]]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">object_setClass</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">customClass</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This private method makes use of our access to the Objective-C runtime.  In the assertion, we make sure that the instance size of our custom cell is the same as <code>NSTextFieldCell</code>.  This is just a protection against us screwing something up badly when we switch classes.  Next we do the switch using <code>object_setClass()</code>.</p>

<p>Enough of the swizzly stuff.  Let&#8217;s look add some of the subtleties that we could have easily forgotten, like the cursor.  Over text fields, we are accustomed to seeing the I beam cursor.  But over a button, it looks silly.  So we override <code>resetCursorRect</code>.  The documentation succinctly says what it does:  &#8220;Overridden by subclasses to define their default cursor rectangles.&#8221;  So, we just add the two rects with the correct cursors to the two parts of our field using <code>addCursorRect:cursor:</code>.</p>

<p>That&#8217;s about it for the internals of <code>CCFBrowserTextField</code>; hopefully you can put it to use in your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not window dressing]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/19/not-window-dressing/"/>
    <updated>2012-09-19T10:00:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/19/not-window-dressing</id>
    <content type="html"><![CDATA[<p>After 3 years of full-time development on iOS and Mac (and many years of dabbling), I&#8217;ve had the chance to write and read a lot of code.  The exponential growth of these platforms has been amazing; but it has brought a number of challenges.  One of the challenges has been how to bring developers new to Objective-C and Cocoa to the community in a way that helps us all write better code.  Code that&#8217;s readable and code that us mortals can maintain long after it was written.</p>

<h2>Broken windows</h2>

<p>The broken windows theory is a construct in the social sciences that deals with the establishment of norms around vandalism and other criminal behavior.  The idea is that communities that fail to care for their physical appearance are subject to more decline as the outward appearances signal an area of low value.</p>

<p>James Wilson and George Kelling, in the article &#8220;Broken Windows&#8221; (The Atlantic Monthly, March 1982) described this example:</p>

<blockquote><blockquote><p><em>&#8220;Consider a building with a few broken windows. If the windows are not repaired, the tendency is for vandals to break a few more windows. Eventually, they may even break into the building, and if it&#8217;s unoccupied, perhaps become squatters or light fires inside. Or consider a sidewalk. Some litter accumulates. Soon, more litter accumulates. Eventually, people even start leaving bags of trash from take-out restaurants there or breaking into cars.&#8221;</em></p></blockquote></blockquote>

<p>Does code suffer from the same social phenomena?  Who knows - but what developers do is a craft.  And it is a craft that contributes to a body of work, whether formalized in a discrete project or whether implicitly in the way we post code on Stack Overflow.  Ultimately, code finds itself in a body of literature that sets the standards for the community.  As craftspeople, we have a responsibility to the community to set standards that encourage clear thinking.</p>

<h2>Foolish thoughts</h2>

<p>The famous British author George Orwell wrote an essay entitled &#8220;Politics and the English Language&#8221; in 1946.  In this brief work, he describes several problems with the use of his native language and how it obscures meaning.  But the most powerful hypothesis that he puts forward is that the sloppy use of language leads to flawed reasoning:</p>

<blockquote><blockquote><p><em>&#8220;Now, it is clear that the decline of a language must ultimately have political and economic causes: it is not due simply to the bad influence of this or that individual writer. But an effect can become a cause, reinforcing the original cause and producing the same effect in an intensified form, and so on indefinitely. A man may take to drink because he feels himself to be a failure, and then fail all the more completely because he drinks. It is rather the same thing that is happening to the English language. It becomes ugly and inaccurate because our thoughts are foolish, but the slovenliness of our language makes it easier for us to have foolish thoughts.&#8221;</em> (George Orwell, &#8220;Politics and the English Language&#8221;, Horizon, April 1946)</p></blockquote></blockquote>

<p>Code follows this same pattern.  The manner in which we write code both reflects the way we think about a problem <strong>and</strong> in turn, it causes us to to frame our thoughts about the problem in the context of the solution we&#8217;ve crafted.  Cause and effect exert a bidirectional influence on each other.  It&#8217;s clear that poor use of our language, the formal language of Objective-C, may cause us to think about the problems we&#8217;re solving in faulty ways.</p>

<p>At Cocoa Factory, we love to code and we love to code well.  So, we&#8217;re taking the next few weeks to describe our approach to readable, maintainable, functional, and beautiful code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSArrayController thread safety]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/12/nsarraycontroller-thread-safety/"/>
    <updated>2012-09-12T03:18:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/12/nsarraycontroller-thread-safety</id>
    <content type="html"><![CDATA[<p><code>NSArrayController</code> is a work-horse of Cocoa bindings.  We recently ran into a problem with thread-safety which is not mentioned <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSArrayController_Class/Reference/Reference.html">in the documentation</a>.</p>

<p>Consider this piece of code that downloads some resources and populates an <code>NSArrayController</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadUsers</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CCFUserListDownloader</span> <span class="o">*</span><span class="n">downloader</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CCFUserListDownloader</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSessionID:</span><span class="n">self</span><span class="p">.</span><span class="n">sessionID</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">downloader</span> <span class="nl">downloadWithCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">CCFAPIStatus</span> <span class="n">status</span><span class="p">,</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">remoteObjects</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">remoteObjects</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CCFRemoteUser</span> <span class="o">*</span><span class="n">user</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CCFRemoteUser</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDictionary:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">user</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">[[</span><span class="n">self</span> <span class="n">userArrayController</span><span class="p">]</span> <span class="nl">addObject:</span><span class="n">user</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">self</span> <span class="n">userArrayController</span><span class="p">]</span> <span class="nl">removeObjectAtArrangedObjectIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Occasionally, we would get crashes on startup traced to this method.  The problem is that our <code>userArrayController</code> has multiple bindings to the UI.  Since <code>downloadUsers</code> was being executed on a background queue, its completion block was executed on the same queue.  When we add a <code>user</code> object to the array controller on a queue other than main, we would occasionally crash.  The solution is simple, just wrap the <code>addObject</code> call in an asynchronous dispatch to the main queue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="n">userArrayController</span><span class="p">]</span> <span class="nl">addObject:</span><span class="n">user</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, don&#8217;t add objects to instances of <code>NSArrayController</code> on a background queue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's a run loop anyway?  NSRunLoop 101]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/06/whats-a-run-loop-anyway/"/>
    <updated>2012-09-06T18:10:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/06/whats-a-run-loop-anyway</id>
    <content type="html"><![CDATA[<p><code>NSRunLoop</code> is one of the mysterious classes in the frameworks that few seem to understand really well.  I recently encountered difficulties with some aynshcronous networking code (more on that in a future post) and thought I&#8217;d share what I learned about run loops.</p>

<h2>Facts about run loops</h2>

<h3>Run loops manage input source events</h3>

<p>A run loop - <code>NSRunLoop</code> in Cocoa - is a class of objects that manages input sources, like user events (mouse, keyboard, etc.), <code>NSPort</code> events, and those that emanate from <code>NSConnection</code> objects.  You might think that the latter is the superclass of <code>NSURLConnection</code> objects; but you&#8217;d be wrong.  <code>NSURLConnection</code> is a subclass of <code>NSObject</code> - even though run loops manage events from <code>NSURLConnection</code> also.  So, you get the picture?  <code>NSRunLoop</code> manages events.</p>

<h3>Every thread gets a run loop</h3>

<p>If you create a thread, you get an <code>NSRunLoop</code> with it.</p>

<h3>(Most) run loops don&#8217;t run by themselves</h3>

<p>You must explictly run any run loop other than the main thread run loop.</p>

<h3>Run loops that have no input sources don&#8217;t run.</h3>

<p>Look closely at the documentation for <code>NSRunLoop</code> <code>run</code> method:  <em>&#8220;If no input sources or timers are attached to the run loop, this method exits immediately&#8230;&#8221;</em>  This means that if you want a run loop to keep turning, you need to find an event source to attach to it.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">runLoop</span> <span class="nl">addPort:</span><span class="p">[</span><span class="n">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// now when we start the runLoop, we have an event source</span>
</span><span class='line'><span class="p">[</span><span class="n">runLoop</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>But simply removing all input sources from a run loop is not guaranteed to stop it.  IF you want to stop a run loop, you must explicitly do so:  `</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">BOOL</span> <span class="n">shouldRun</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>    <span class="c1">// this is in a &quot;global&quot; context</span>
</span><span class='line'><span class="n">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span> <span class="n">shouldRun</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">runLoop</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span> <span class="nl">beforeData:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantFuture</span><span class="p">]]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set shouldRun to NO somewhere else to terminate the run loop</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run loops have modes and you can create your own</h3>

<p>Run loops have modes that specify groups of input sources that are monitored for the run loop running in that mode.  Usually you will just use the <code>NSDefaultRunLoopMode</code>; but the others are:</p>

<p><code>NSConnectionReplyMode</code> used with <code>NSConnection</code> objects</p>

<p><code>NSModalPanelRunLoopMode</code> used with events associated with modal panels in OS X</p>

<p><code>NSEventTrackingRunLoopMode</code> used with UI tracking events</p>

<p><code>NSRunLoopCommonModes</code> is a configurable group of common modes.  In Foundation is includes all of the modes except <code>NSConnectionReplyMode</code> by default.</p>

<p>If you want to create your own mode, just use a different string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">runLoop</span> <span class="nl">addPort:</span><span class="p">[</span><span class="n">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode:</span><span class="s">@&quot;com.cocoafactory.MySpecialMode&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apple recommends reverse DNS notation to avoid stepping on someone else&#8217;s run loop.</p>

<h3>You rarely need to work directly with run loops</h3>

<p>Because the main run loop is vital to the application, the <code>run</code> method on <code>NSApplication</code> and <code>UIApplication</code> start the main run loop during the startup sequence. Otherwise, even for threads that you create yourself, you probably do not need to start its run loop.  If the thread needs to work with ports, input sources, timers, or certain connections, then you need to start and manage its run loop for those events.  More on some of those situations in a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're moving (blogs)]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/06/moving-to-octopress/"/>
    <updated>2012-09-06T15:57:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/06/moving-to-octopress</id>
    <content type="html"><![CDATA[<h2>Goodbye Wordpress, hello Octopress</h2>

<p>We&#8217;re in the process of moving all of our company pages and weblog to Octopress hosted through Github.  For several years, we maintained a presence on a dedicated site mostly setup with Wordpress.  Why the switch?</p>

<p>It came down to several factors:</p>

<ul>
<li><p>Lightweight vs. heavyweight solutions</p>

<p>  Wordpress is a great blogging platform; but there&#8217;s a lot of &#8220;stuff&#8221; to manage.  Further, it&#8217;s a dynamic content system - meaning, your content has to be generated from a database each time the page is rendered.  Octopress, instead, serves static pages.  There&#8217;s something appealingly simple about static content.</p></li>
<li><p>Workflow</p>

<p>  We develop software first, and blog second.  Writing about our work is important; but it has to fit into our workflow.  Since we are always working in <code>git</code> using Octopress feels very comfortable.</p></li>
<li><p>Kick-start</p>

<p>  Working through the challenges of getting Octopress installed (and they were significant) was paradoxically a motivator to get down to writing more.  I mean - having spent all this time getting Octopress installed, I&#8217;m not about to let the effort be wasted!</p></li>
<li><p>Comments</p>

<p>  I got tired of seeing queues of comments 99.9% of which was spam.  I&#8217;m sure Wordpress has better ways of dealing with comment spam - but I decided it was just easier to turn comments off on the new weblog.  The thing is, the real discussion isn&#8217;t happening on the weblog; it&#8217;s happening on Twitter and everywhere else.  You really should read Matt Gemmell&#8217;s <a href="http://mattgemmell.com/2011/11/29/comments-off/">comments on comments</a> about the phenomenon.</p></li>
</ul>


<h2>Installing Octopress</h2>

<p>Octopress installation was a little cumbersome owing mainly to difficulty with versioning of <code>rvm</code>.  After reading about the difficulties of installing on OS X 10.8, I decided to install it on Ubuntu 12.04 which I run as a virtual machine alongside Mountain Lion.  Again, it was mainly about making sure that the versioning of <code>rvm</code> was correct.  There are detailed instructions online, but I would add a couple of pointers:</p>

<p>We used <a href="http://www.lennu.net/2012/05/11/octopress-installation-in-ubuntu-12-dot-04-with-rsync/">a tutorial</a> on lennu.net to get started.  Just make sure you get <code>rvm 1.9.2</code> installed.  If you install the latest stable version, you&#8217;ll come to grief later in the installation.</p>

<p>Apart from that, all of the instructions are at Github and on the lennu.net tutorial.</p>
]]></content>
  </entry>
  
</feed>
