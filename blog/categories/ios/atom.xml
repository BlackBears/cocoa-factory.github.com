<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Cocoa Factory]]></title>
  <link href="http://cocoa-factory.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://cocoa-factory.github.com/"/>
  <updated>2013-03-23T14:12:46-05:00</updated>
  <id>http://cocoa-factory.github.com/</id>
  <author>
    <name><![CDATA[Alan Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auto-incrementing Xcode build numbers]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/03/18/auto-incrementing-xcode-build-numbers/"/>
    <updated>2013-03-18T05:16:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/03/18/auto-incrementing-xcode-build-numbers</id>
    <content type="html"><![CDATA[<p>There are as many schemes for versioning of Xcode projects as there are developers.  One of the difficulties, of course, is the way that Xcode labels the two version identifiers in the IDE.  First, there's <code>CFBundleShortVersionString</code> which according the <a href="https://developer.apple.com/library/mac/#documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html">documentation</a> is:</p>

<blockquote><p>"the <strong>release version number</strong> of the bundle which identifies a released iteration of the app.  The release version number is a string comprised of three period-separated integers.  The first integer represents major revisions to the app, such as revisions that implement new features or major changes. The second integer denotes revisions that implement less prominent features. The third integer represents maintenance releases."</p></blockquote>

<p>This differs from <code>CFBundleVersion</code> which is:</p>

<blockquote><p>"the <strong>build version number</strong> of the bundle, which identifies an iteration (released or unreleased) of the bundle. The build version number should be a string comprised of three non-negative, period-separated integers with the first integer being greater than zero."</p></blockquote>

<p>Importantly, Apple uses <code>CFBundleVersion</code> to version your app and <code>CFBundleShortVersionString</code> to present the version to the user.  So, on submission, the <code>CFBundleVersion</code> must be higher than the last version submitted.  That's why I use the following script to auto-increment the <code>CFBundleVersion</code> every time I build the source:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>buildNumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$INFOPLIST_FILE")
buildNumber=$(($buildNumber + 1))
/usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "$INFOPLIST_FILE"
```</p>

<p>When I setup a new project, this script is one of the build phases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CCFScrollingTabBar]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/02/10/introducing-ccfscrollingtabbar/"/>
    <updated>2013-02-10T21:56:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/02/10/introducing-ccfscrollingtabbar</id>
    <content type="html"><![CDATA[<p>We're pleased to announce the release of a new open source control called <code>CCFScrollingTabBar</code>, a refined scrolling control for iPhone.  You can find it on github <a href="https://github.com/cocoa-factory/CCFScrollingTabBar">here</a>.</p>

<p>It's a little like <a href="https://github.com/jasarien/JSScrollableTabBar"><code>JSScrollableTabBar</code></a> with completely customizable colors.  Rather than just talk about it, here's what it looks like:
<img class="right" src="/images/tab-bar-img-001.jpg">  For the developer, this is a simple component to use.  Just provide the instance of <code>CCFScrollableTabView</code> with the colors for the gradient background and text, and the titles of the tabs, and we take care of the rest.  You can receive delegate messages when the use taps on an item.  We setup a simple example project to see it in action.</p>

<h4>Using CCFScrollingTabBar in a nutshell</h4>

<p>Our example project uses a scrolling tab bar instantiated in a nib.  It should be exactly 41 pixels high.  Your instance of <code>CCFScrollingTabView</code> should have a delegate and a data source.  Without a data source you would see nothing.</p>

<p>``` objc</p>

<h1>pragma mark - CCFScrollableTabViewDataSource</h1>

<ul>
<li><p>(UIColor <em>)textColorInScrollableTabView:(CCFScrollableTabView </em>)tabView {
  return [UIColor whiteColor];
}</p></li>
<li><p>(UIColor <em>)darkColorInScrollableTabView:(CCFScrollableTabView </em>)tabView {
  return [UIColor colorWithRed:0.0706f green:0.1529f blue:0.4235f alpha:1.0f];
}</p></li>
<li><p>(UIColor <em>)lightColorInScrollableTabView:(CCFScrollableTabView </em>)tabView {
  return [UIColor colorWithRed:0.258f green:0.639f blue:0.890f alpha:1.0f];
}</p></li>
<li><p>(NSArray <em>)titlesInScrollableTabView:(CCFScrollableTabView </em>)tabView {
  return [NSArray arrayWithObjects:@"Afrikaans",@"Basque",@"Catalan",@"Croatian",@"Danish",@"English",@"French",@"German",@"Hungarian", nil];
}
```</p></li>
</ul>


<p>That's it!  If you want to know when the user taps on an item, you should implement the <code>scrollableTabView:didSelectItemAtIndex:</code> method on the <code>CCFScrollableTabViewDelegate</code> protocol.  That way your class will get a message with the index of the selection.</p>

<ul>
<li><a href="https://github.com/cocoa-factory/CCFScrollingTabBar">CCFScrollingTabBar</a> on github</li>
<li><a href="http://184.72.241.210/docs/CCFScrollingTabView/index.html">Documentation</a></li>
</ul>


<p>Comments, questions?  Contact Alan at <code>@NSBum</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[troubleshooting cocoapods installation]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation/"/>
    <updated>2013-02-01T04:49:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/?q=rvm%20sy#">CocoaPods</a> is a popular new way to manage dependencies in Xcode projects.</p>

<h4>Canonical installation</h4>

<p>CocoaPods is installed as a ruby gem; and usually everything 'just works.'  Here's how you install CocoaPods:</p>

<p><code>bash
$ sudo gem install cocoapods
</code></p>

<p>If everything works properly, you should see something like this:
<code>
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: activesupport-3.2.11.gem (100%)
Fetching: colored-1.2.gem (100%)
Fetching: xcodeproj-0.4.2.gem (100%)
Building native extensions.  This could take a while...
Fetching: multipart-post-1.1.5.gem (100%)
Fetching: faraday-0.8.4.gem (100%)
Fetching: addressable-2.3.2.gem (100%)
Fetching: faraday_middleware-0.9.0.gem (100%)
Fetching: hashie-1.2.0.gem (100%)
Fetching: netrc-0.7.7.gem (100%)
Fetching: octokit-1.22.0.gem (100%)
Fetching: escape-0.0.4.gem (100%)
Fetching: json-1.7.6.gem (100%)
Building native extensions.  This could take a while...
Fetching: open4-1.3.0.gem (100%)
Fetching: rake-0.9.6.gem (100%)
Fetching: cocoapods-0.16.1.gem (100%)
Successfully installed i18n-0.6.1
Successfully installed multi_json-1.5.0
Successfully installed activesupport-3.2.11
Successfully installed colored-1.2
Successfully installed xcodeproj-0.4.2
Successfully installed multipart-post-1.1.5
Successfully installed faraday-0.8.4
Successfully installed addressable-2.3.2
Successfully installed faraday_middleware-0.9.0
Successfully installed hashie-1.2.0
Successfully installed netrc-0.7.7
Successfully installed octokit-1.22.0
Successfully installed escape-0.0.4
Successfully installed json-1.7.6
Successfully installed open4-1.3.0
Successfully installed rake-0.9.6
Successfully installed cocoapods-0.16.1
17 gems installed
Installing ri documentation for i18n-0.6.1...
Installing ri documentation for multi_json-1.5.0...
Installing ri documentation for activesupport-3.2.11...
Installing ri documentation for colored-1.2...
Installing ri documentation for xcodeproj-0.4.2...
Installing ri documentation for multipart-post-1.1.5...
Installing ri documentation for faraday-0.8.4...
Installing ri documentation for addressable-2.3.2...
Installing ri documentation for faraday_middleware-0.9.0...
Installing ri documentation for hashie-1.2.0...
Installing ri documentation for netrc-0.7.7...
Installing ri documentation for octokit-1.22.0...
Installing ri documentation for escape-0.0.4...
Installing ri documentation for json-1.7.6...
Installing ri documentation for open4-1.3.0...
Installing ri documentation for rake-0.9.6...
Installing ri documentation for cocoapods-0.16.1...
Installing RDoc documentation for i18n-0.6.1...
Installing RDoc documentation for multi_json-1.5.0...
Installing RDoc documentation for activesupport-3.2.11...
Installing RDoc documentation for colored-1.2...
Installing RDoc documentation for xcodeproj-0.4.2...
Installing RDoc documentation for multipart-post-1.1.5...
Installing RDoc documentation for faraday-0.8.4...
Installing RDoc documentation for addressable-2.3.2...
Installing RDoc documentation for faraday_middleware-0.9.0...
Installing RDoc documentation for hashie-1.2.0...
Installing RDoc documentation for netrc-0.7.7...
Installing RDoc documentation for octokit-1.22.0...
Installing RDoc documentation for escape-0.0.4...
Installing RDoc documentation for json-1.7.6...
Installing RDoc documentation for open4-1.3.0...
Installing RDoc documentation for rake-0.9.6...
Installing RDoc documentation for cocoapods-0.16.1...
</code></p>

<h4>Failed installation</h4>

<p>However, CocoaPods installation can fail for a number of reasons.  Here are a few things to check if the installation fails:</p>

<ul>
<li><p><strong>Have you installed the Xcode command line tools?</strong>  If you update Xcode, then you need to re-download the command line tools.  This is a common gotcha.</p></li>
<li><p><strong>Are you using MacRuby?</strong> MacRuby is not supported.  Your ruby should be Ruby MRI 1.8.7 or 1.9.3</p></li>
</ul>


<h4>Errors during installation</h4>

<p>Our initial attempt with <code>sudo gem install cocoapods</code> gave the following error:</p>

<p><code>`` bash
/usr/local/lib/ruby/1.9.1/yaml.rb:56:in</code><top (required)>':
It seems your ruby installation is missing psych (for YAML output).
To eliminate this warning, please install libyaml and reinstall your ruby.
ERROR:  Loading command: install (LoadError)</p>

<pre><code>cannot load such file -- zlib
</code></pre>

<p>ERROR:  While executing gem ... (NameError)</p>

<pre><code>uninitialized constant Gem::Commands::InstallCommand
</code></pre>

<p><code>``
First, we tried to just install the libyaml package with</code>rvm pkg install libyaml<code>but this got us nowhere.  Same error when we try to</code>sudo gem install cocoapods`.</p>

<p>Since we weren't using ruby for anything else on the system, blowing away RVM seemed like a benign (if nuclear) option.  So we used <code>rvm implode</code> and removed all references to <code>.rvm</code> in our PATH.  You need to also take a look at <code>.bashrc</code> <code>.profile</code> and <code>.bash_profile</code> for other references to rvm if you want to try this option.  See the accepted answer to <a href="http://stackoverflow.com/questions/3558656/how-to-remove-rvm-ruby-version-manager-from-my-system">this question</a> for details on the nuclear option for removing <code>rvm</code>.</p>

<p>Next we reinstalled <code>rvm</code>:</p>

<p><code>bash
curl -L https://get.rvm.io | bash -s stable --ruby
</code></p>

<p>This installs <code>rvm</code> and the latest stable version of ruby.  Next update the terminal and check the version of ruby in use:</p>

<p><code>bash
Darwin:~ alan$ source /usr/local/rvm/scripts/rvm
Darwin:~ alan$ which ruby
</code></p>

<p>Hmmm....we're still using the system ruby.  Let's see what ruby versions we have:</p>

<p>``` bash
Darwin:~ alan$ rvm list</p>

<p>A RVM version 1.18.5 (stable) is installed yet 1.15.7 (stable) is loaded.
Please do one of the following:
  * 'rvm reload'
  * open a new shell
  * 'echo rvm_auto_reload_flag=1 >> ~/.rvmrc' # for auto reload with msg.
  * 'echo rvm_auto_reload_flag=2 >> ~/.rvmrc' # for silent auto reload.
```</p>

<p>So, let's do as it says and reload:</p>

<p>``` bash
Darwin:~ alan$ rvm reload
RVM reloaded!
Darwin:~ alan$ rvm list</p>

<p>rvm rubies</p>

<p>   ruby-1.9.3-p194 [ x86_64 ]
=* ruby-1.9.3-p374 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>```</p>

<p>Now we can confirm the ruby version in use:</p>

<p><code>bash
Darwin:~ alan$ which ruby
/usr/local/rvm/rubies/ruby-1.9.3-p374/bin/ruby
</code></p>

<p>So we should be good to go.  Let's try installing CocoaPods again:</p>

<p>``` bash
Darwin:~ alan$ sudo gem install cocoapods
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: activesupport-3.2.11.gem (100%)
Fetching: colored-1.2.gem (100%)
Fetching: xcodeproj-0.4.2.gem (100%)</p>

<h1>many more lines follow...</h1>

<p>```</p>

<p>Success! Now back to the canonical installation:</p>

<p><code>bash
Darwin:~ alan$ pod setup
Setting up CocoaPods master repo
Cloning spec repo `master' from `https://github.com/CocoaPods/Specs.git' (branch `master')
Setup completed (read-only access)
</code>
```</p>

<h4>Conclusion</h4>

<p>For developers with more experience dealing with ruby, its versions and dependencies, deleting rvm and reinstalling may seem like a blunt instrument.  For me, this worked well and allowed us to start working with CocoaPods after a lot of earlier frustration.</p>

<h4>Questions/comments?</h4>

<p>I'd love to hear from you at <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLDB print registers]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers/"/>
    <updated>2012-12-16T12:53:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers</id>
    <content type="html"><![CDATA[<p>Somes while debugging, or when you want to understand what the compiler doing with your code under the hood, you may want to print the contents of all the registers in the current frame.</p>

<p>To print the current register contents in LLDB it's <code>register read</code>:
<img src="/images/lldb.png" alt="console" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Target conditionals]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/10/04/target-conditionals/"/>
    <updated>2012-10-04T14:04:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/10/04/target-conditionals</id>
    <content type="html"><![CDATA[<p>If you hang out on Stack Overflow long enough, you're bound to see a few questions about target conditionals like <a href="http://stackoverflow.com/questions/12132933/preprocessor-macro-for-os-x-targets">this one - Preprocessor macro for OS X targets</a>; so here's an attempt to sort it out:</p>

<h2>How do you conditionally compile for Mac and iOS platforms?</h2>

<p>This one is a little confusing because <code>TARGET_MAC_OS</code> doesn't really do what you think.</p>

<table>
<thead>
<tr>
<th>  Conditional                  </th>
<th> Mac OS </th>
<th> iOS device </th>
<th> iOS sim</th>
</tr>
</thead>
<tbody>
<tr>
<td>  <code>TARGET_OS_MAC</code>              </td>
<td>   X    </td>
<td>    X       </td>
<td>    X    </td>
</tr>
<tr>
<td>  <code>TARGET_OS_IPHONE</code>           </td>
<td>        </td>
<td>    X       </td>
<td>    X    </td>
</tr>
<tr>
<td>  <code>TARGET_OS_EMBEDDED</code>         </td>
<td>        </td>
<td>    X       </td>
<td>         </td>
</tr>
<tr>
<td>  <code>TARGET_OS_IPHONE_SIMULATOR</code> </td>
<td>        </td>
<td>            </td>
<td>    X    </td>
</tr>
</tbody>
</table>


<p>(Credits to Greg Parker, <a href="http://www.sealiesoftware.com/blog/archive/2010/8/16/TargetConditionalsh.html"><em>Hamster Emporium Target Conditionals</em></a> for the table)</p>

<p>If you have one block of code for Mac and another for iOS, the trick is to place the iOS condition first:</p>

<p>``` objc</p>

<h1>if TARGET_OS_IPHONE</h1>

<p>NSString *dataString = [NSString stringWithFormat:"data = %d",count];</p>

<h1>else</h1>

<p>// this compiles on Mac OS
NSString *dataString = [NSString stringWithFormat:"data = %ld",count];</p>

<h1>endif</h1>

<p>```</p>

<h2>How I support multiple iOS or Mac versions?</h2>

<p>Usually this means that the developer wants to incorporate features in a new OS version while maintaing backwards compatibility.  The solution has a few steps:</p>

<ul>
<li>Set the base SDK on the target build setting to the newest vesion that you need.</li>
<li>Set the deployment target to the oldest version that you support</li>
</ul>


<p>Having set the target build settings, we have to do some work in the code.  Let's say we want to incorporate iOS 5 features in an app that should support earlier versions, say iOS 4.3.  Then we'll set the base SDK to iOS 5+ and the deployment target to iOS 4.3.  In the code, we do something like this:</p>

<p>``` objc</p>

<h1>if __IPHONE_OS_VERSION_MAX_ALLOWED >= 50000</h1>

<p>// compile this when the target base SDK is iOS 5.0 or greater.<br/>
// We use this as a compile-time test to prevent errors if we
// try to recompile the project with a lower base SDK setting</p>

<h1>endif</h1>

<p><code>``
So far, we will be able to compile for platforms between the OS ranges specified by our lower boundary of the deployment target and our upper boundary of the base SDK.  But what happens at runtime?  We'll crash on any features above our deployment target; so we need a runtime check for class availability.  As of the iOS 4.2 SDK, you should use the</code>NSObject<code></code>class<code>method to check for the availability of weakly linked classes at runtime.  This takes advantage of the</code>NS_CLASS_AVAILABLE` macro; so in our example:</p>

<p>``` objc</p>

<h1>if __IPHONE_OS_VERSION_MAX_ALLOWED >= 50000</h1>

<p>if( [CIImage class]  ) {</p>

<pre><code>// CIImage is available in iOS 5.0
</code></pre>

<p>}</p>

<h1>endif</h1>

<p>```</p>

<p>The first check is a compile-time check to ensure that we can compile on lower SDK's and the second check is a runtime check to ensure that the weakly linked <code>CIImage</code> class is available on the device where the app is running.  Of course, we can also test for method availability instead:</p>

<p>``` objc</p>

<h1>if __IPHONE_OS_VERSION_MAX_ALLOWED >= 50000</h1>

<p>if( [UIImage respondsToSelector:@selector(someNewMethod)]  ) {</p>

<pre><code>// we can use fancy new method on UIImage
</code></pre>

<p>}</p>

<h1>endif</h1>

<p>```</p>

<h2>What is <code>__IPHONE_OS_VERSION_MIN_REQUIRED?</code></h2>

<p>Unless you set it yourself, the compiler will set it to your target deployment version.  Same for <code>__MAC_OS_VERSION_MIN_REQUIRED</code>.  But you probably guessed that already.</p>

<p>Question? Comments?  Tweet Alan <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
</feed>
