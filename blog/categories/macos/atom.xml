<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: macos | Cocoa Factory]]></title>
  <link href="http://cocoa-factory.github.com/blog/categories/macos/atom.xml" rel="self"/>
  <link href="http://cocoa-factory.github.com/"/>
  <updated>2013-03-11T05:04:43-05:00</updated>
  <id>http://cocoa-factory.github.com/</id>
  <author>
    <name><![CDATA[Alan Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[App version icon overlays:  The Mac edition]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/03/10/app-version-icon-overlays-the-mac-edition/"/>
    <updated>2013-03-10T16:28:00-05:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/03/10/app-version-icon-overlays-the-mac-edition</id>
    <content type="html"><![CDATA[<p>If you haven't heard yet, the fifth iteration of <a href="http://nsconference.com">NSConference</a> was awesome.  Lots of great talks, meeting other developers, and of course, sunny Leicester, UK.</p>

<p><span class='caption-wrapper left'><img class='caption' src='/images/icon_128x128.png' width='' height='' alt='Stamped icon' title='Stamped icon'><span class='caption-text'>Stamped icon</span></span> Among the great talks was Evan Doll's about how Flipboard makes use of the development toolchain in novel ways to make their process more efficient and less error-prone.  Krzysztof Zablocki <a href="http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/">has written up</a> a great description on his implementation of Evan's idea.  It works really well for iOS.  It's such a neat trick, that I thought I'd build on it for Mac OS.  Turns out that core process is almost the same as Krzysztof's; but with some twists.</p>

<p>Read on for more about how I implemented Mac icon overlays.</p>

<!-- more -->


<p>As I mentioned, <a href="http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/">Krzysztof did the heavy lifting</a>; so you'll want to check that out first.  Briefly, he uses a Run Script build phase in Xcode to apply certain data to the icon, including:</p>

<ul>
<li>application version number from the <code>CFBundleVersion</code></li>
<li>branch name</li>
<li>part of the commit hash</li>
</ul>


<p>I've largely left his <code>processIcon()</code> function intact with a couple exceptions:</p>

<h4>Caption height</h4>

<p>In the original version of <code>processIcon()</code> the caption height is fixed at 40px.  This works for icons in the iOS range; but Mac icons range from 16 to 1024px; so we wanted to be able to scale the caption height proportionally.  Also, we can't really stamp icons below a certain threshold size value - say around 64 px.  Otherwise, the text is not rendered legibly.  So we'll add these lines:</p>

<p><code>bash
height=`identify -format %h ${base_file}`
banner_height=$(($height/3))
if [ $width -lt 64 ]; then return; fi
</code></p>

<h4>Dealing with iconsets</h4>

<p>Mac icons are packaged in iconsets. A <code>.iconset</code> file is just a folder renamed so that the extension is <code>.iconset</code> and which contains all of the icons that will be built into a <code>.icns</code> file during the build process.  Therefore, we need a new bash function to process an iconset.  Let's call it <code>processIconset()</code> <em>(Aren't we creative!)</em></p>

<p>``` bash
function processIconset() {</p>

<pre><code>base_name=`echo $1 | sed "s/\.iconset//g"`
WORKING_DIR=`mktemp -d /tmp/icon_processor.XXXXXXXX`
echo "Created working directory at $WORKING_DIR"

DIR=$1
cp -r ${DIR}/ $WORKING_DIR

echo "Finished copying application icons to temporary directory"
mkdir $WORKING_DIR/$DIR
for icon in $WORKING_DIR/*.png
do
    echo "Annotating icon file $icon"
    processIcon $icon
    mv $icon $WORKING_DIR/$DIR
done
echo "Converting iconset to .icns"
iconutil --convert icns --output $WORKING_DIR/$base_name.icns  $WORKING_DIR/$DIR
mv $WORKING_DIR/$base_name.icns $icns_target_path
rm -r $WORKING_DIR
</code></pre>

<p>}
```</p>

<p>Briefly, we:</p>

<ul>
<li>Grab the name of the iconset (everything but the file extension)</li>
<li>Create a working directory in <code>/tmp</code></li>
<li>Copy all of our icons from the <code>.iconset</code> to the working directory</li>
<li>Iterate over each icon, calling our new <code>processIcon()</code> function</li>
<li>Move the "stamped" icon into an interior directory whose name is the same as the original <code>.iconset</code></li>
<li>Use <code>iconutil</code> to create the <code>.icns</code> file and move it to the proper build directory</li>
<li>Clean up</li>
</ul>


<p>So, here's the complete script in use in our RegexMatch application for Mac:</p>

<p><code>`` bash
commit=</code>git rev-parse --short HEAD<code>
branch=</code>git rev-parse --abbrev-ref HEAD<code>
version=</code>/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${INFOPLIST_FILE}"`
icns_target_path="${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"</p>

<p>function processIcon() {</p>

<pre><code>export PATH=$PATH:/usr/local/bin
base_file=$1
echo $1
if [ ! -f $base_file ]; then return; fi

target_file=$base_file
target_path=$target_file

if [ $CONFIGURATION = "Release" ]; then
cp ${base_file} $target_path
return
fi

width=`identify -format %w ${base_file}`
height=`identify -format %h ${base_file}`
banner_height=$(($height/3))
if [ $width -lt 64 ]; then return; fi
convert -background '#0008' -fill white -gravity center -size ${width}x${banner_height}\
-quality 1\
caption:"${version} ${branch} ${commit}"\
${base_file} +swap -gravity south -composite ${target_path}
</code></pre>

<p>}</p>

<p>function processIconset() {</p>

<pre><code>base_name=`echo $1 | sed "s/\.iconset//g"`
WORKING_DIR=`mktemp -d /tmp/icon_processor.XXXXXXXX`
echo "Created working directory at $WORKING_DIR"

DIR=$1
cp -r ${DIR}/ $WORKING_DIR

echo "Finished copying application icons to temporary directory"
mkdir $WORKING_DIR/$DIR
for icon in $WORKING_DIR/*.png # */
do
    echo "Annotating icon file $icon"
    processIcon $icon
    mv $icon $WORKING_DIR/$DIR
done
echo "Converting iconset to .icns"
iconutil --convert icns --output $WORKING_DIR/$base_name.icns  $WORKING_DIR/$DIR
mv $WORKING_DIR/$base_name.icns $icns_target_path
rm -r $WORKING_DIR
</code></pre>

<p>}</p>

<p>processIconset RegexMatch.iconset
```</p>

<p>Oh, lastly there are many images in a typical <code>.iconset</code> so it can take a long time to complete the script.  Something you may not want to execute every build. Thanks to Evan for the idea and Krzysztof for the iOS implementation.  As always, you can find Alan at <code>@NSBum</code>.  We'd love to hear questions and comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[troubleshooting cocoapods installation]]></title>
    <link href="http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation/"/>
    <updated>2013-02-01T04:49:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2013/02/01/troubleshooting-cocoapods-installation</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/?q=rvm%20sy#">CocoaPods</a> is a popular new way to manage dependencies in Xcode projects.</p>

<h4>Canonical installation</h4>

<p>CocoaPods is installed as a ruby gem; and usually everything 'just works.'  Here's how you install CocoaPods:</p>

<p><code>bash
$ sudo gem install cocoapods
</code></p>

<p>If everything works properly, you should see something like this:
<code>
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: activesupport-3.2.11.gem (100%)
Fetching: colored-1.2.gem (100%)
Fetching: xcodeproj-0.4.2.gem (100%)
Building native extensions.  This could take a while...
Fetching: multipart-post-1.1.5.gem (100%)
Fetching: faraday-0.8.4.gem (100%)
Fetching: addressable-2.3.2.gem (100%)
Fetching: faraday_middleware-0.9.0.gem (100%)
Fetching: hashie-1.2.0.gem (100%)
Fetching: netrc-0.7.7.gem (100%)
Fetching: octokit-1.22.0.gem (100%)
Fetching: escape-0.0.4.gem (100%)
Fetching: json-1.7.6.gem (100%)
Building native extensions.  This could take a while...
Fetching: open4-1.3.0.gem (100%)
Fetching: rake-0.9.6.gem (100%)
Fetching: cocoapods-0.16.1.gem (100%)
Successfully installed i18n-0.6.1
Successfully installed multi_json-1.5.0
Successfully installed activesupport-3.2.11
Successfully installed colored-1.2
Successfully installed xcodeproj-0.4.2
Successfully installed multipart-post-1.1.5
Successfully installed faraday-0.8.4
Successfully installed addressable-2.3.2
Successfully installed faraday_middleware-0.9.0
Successfully installed hashie-1.2.0
Successfully installed netrc-0.7.7
Successfully installed octokit-1.22.0
Successfully installed escape-0.0.4
Successfully installed json-1.7.6
Successfully installed open4-1.3.0
Successfully installed rake-0.9.6
Successfully installed cocoapods-0.16.1
17 gems installed
Installing ri documentation for i18n-0.6.1...
Installing ri documentation for multi_json-1.5.0...
Installing ri documentation for activesupport-3.2.11...
Installing ri documentation for colored-1.2...
Installing ri documentation for xcodeproj-0.4.2...
Installing ri documentation for multipart-post-1.1.5...
Installing ri documentation for faraday-0.8.4...
Installing ri documentation for addressable-2.3.2...
Installing ri documentation for faraday_middleware-0.9.0...
Installing ri documentation for hashie-1.2.0...
Installing ri documentation for netrc-0.7.7...
Installing ri documentation for octokit-1.22.0...
Installing ri documentation for escape-0.0.4...
Installing ri documentation for json-1.7.6...
Installing ri documentation for open4-1.3.0...
Installing ri documentation for rake-0.9.6...
Installing ri documentation for cocoapods-0.16.1...
Installing RDoc documentation for i18n-0.6.1...
Installing RDoc documentation for multi_json-1.5.0...
Installing RDoc documentation for activesupport-3.2.11...
Installing RDoc documentation for colored-1.2...
Installing RDoc documentation for xcodeproj-0.4.2...
Installing RDoc documentation for multipart-post-1.1.5...
Installing RDoc documentation for faraday-0.8.4...
Installing RDoc documentation for addressable-2.3.2...
Installing RDoc documentation for faraday_middleware-0.9.0...
Installing RDoc documentation for hashie-1.2.0...
Installing RDoc documentation for netrc-0.7.7...
Installing RDoc documentation for octokit-1.22.0...
Installing RDoc documentation for escape-0.0.4...
Installing RDoc documentation for json-1.7.6...
Installing RDoc documentation for open4-1.3.0...
Installing RDoc documentation for rake-0.9.6...
Installing RDoc documentation for cocoapods-0.16.1...
</code></p>

<h4>Failed installation</h4>

<p>However, CocoaPods installation can fail for a number of reasons.  Here are a few things to check if the installation fails:</p>

<ul>
<li><p><strong>Have you installed the Xcode command line tools?</strong>  If you update Xcode, then you need to re-download the command line tools.  This is a common gotcha.</p></li>
<li><p><strong>Are you using MacRuby?</strong> MacRuby is not supported.  Your ruby should be Ruby MRI 1.8.7 or 1.9.3</p></li>
</ul>


<h4>Errors during installation</h4>

<p>Our initial attempt with <code>sudo gem install cocoapods</code> gave the following error:</p>

<p><code>`` bash
/usr/local/lib/ruby/1.9.1/yaml.rb:56:in</code><top (required)>':
It seems your ruby installation is missing psych (for YAML output).
To eliminate this warning, please install libyaml and reinstall your ruby.
ERROR:  Loading command: install (LoadError)</p>

<pre><code>cannot load such file -- zlib
</code></pre>

<p>ERROR:  While executing gem ... (NameError)</p>

<pre><code>uninitialized constant Gem::Commands::InstallCommand
</code></pre>

<p><code>``
First, we tried to just install the libyaml package with</code>rvm pkg install libyaml<code>but this got us nowhere.  Same error when we try to</code>sudo gem install cocoapods`.</p>

<p>Since we weren't using ruby for anything else on the system, blowing away RVM seemed like a benign (if nuclear) option.  So we used <code>rvm implode</code> and removed all references to <code>.rvm</code> in our PATH.  You need to also take a look at <code>.bashrc</code> <code>.profile</code> and <code>.bash_profile</code> for other references to rvm if you want to try this option.  See the accepted answer to <a href="http://stackoverflow.com/questions/3558656/how-to-remove-rvm-ruby-version-manager-from-my-system">this question</a> for details on the nuclear option for removing <code>rvm</code>.</p>

<p>Next we reinstalled <code>rvm</code>:</p>

<p><code>bash
curl -L https://get.rvm.io | bash -s stable --ruby
</code></p>

<p>This installs <code>rvm</code> and the latest stable version of ruby.  Next update the terminal and check the version of ruby in use:</p>

<p><code>bash
Darwin:~ alan$ source /usr/local/rvm/scripts/rvm
Darwin:~ alan$ which ruby
</code></p>

<p>Hmmm....we're still using the system ruby.  Let's see what ruby versions we have:</p>

<p>``` bash
Darwin:~ alan$ rvm list</p>

<p>A RVM version 1.18.5 (stable) is installed yet 1.15.7 (stable) is loaded.
Please do one of the following:
  * 'rvm reload'
  * open a new shell
  * 'echo rvm_auto_reload_flag=1 >> ~/.rvmrc' # for auto reload with msg.
  * 'echo rvm_auto_reload_flag=2 >> ~/.rvmrc' # for silent auto reload.
```</p>

<p>So, let's do as it says and reload:</p>

<p>``` bash
Darwin:~ alan$ rvm reload
RVM reloaded!
Darwin:~ alan$ rvm list</p>

<p>rvm rubies</p>

<p>   ruby-1.9.3-p194 [ x86_64 ]
=* ruby-1.9.3-p374 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>```</p>

<p>Now we can confirm the ruby version in use:</p>

<p><code>bash
Darwin:~ alan$ which ruby
/usr/local/rvm/rubies/ruby-1.9.3-p374/bin/ruby
</code></p>

<p>So we should be good to go.  Let's try installing CocoaPods again:</p>

<p>``` bash
Darwin:~ alan$ sudo gem install cocoapods
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: activesupport-3.2.11.gem (100%)
Fetching: colored-1.2.gem (100%)
Fetching: xcodeproj-0.4.2.gem (100%)</p>

<h1>many more lines follow...</h1>

<p>```</p>

<p>Success! Now back to the canonical installation:</p>

<p><code>bash
Darwin:~ alan$ pod setup
Setting up CocoaPods master repo
Cloning spec repo `master' from `https://github.com/CocoaPods/Specs.git' (branch `master')
Setup completed (read-only access)
</code>
```</p>

<h4>Conclusion</h4>

<p>For developers with more experience dealing with ruby, its versions and dependencies, deleting rvm and reinstalling may seem like a blunt instrument.  For me, this worked well and allowed us to start working with CocoaPods after a lot of earlier frustration.</p>

<h4>Questions/comments?</h4>

<p>I'd love to hear from you at <code>@NSBum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanding NSOutlineView at load time]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/17/expanding-nsoutlineview-at-load-time/"/>
    <updated>2012-12-17T09:40:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/17/expanding-nsoutlineview-at-load-time</id>
    <content type="html"><![CDATA[<p>Ran across <a href="http://simplyhacking.com/expanding-nsoutlineview-nodes-at-application-start.html">this post</a> on <a href="simplyhacking.com">Simply Hacking</a> that deals with the problem of expanding items in <code>NSOutlineView</code> when the view loads.</p>

<p>If you try to expand items in <code>awakeFromNib</code>, it will fail because the content is not prepared until after <code>awakeFromNib</code> is called on the controller.  The key is to observe <code>content</code> on the <code>NSTreeController</code> using KVO.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLDB print registers]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers/"/>
    <updated>2012-12-16T12:53:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/16/lldb-print-registers</id>
    <content type="html"><![CDATA[<p>Somes while debugging, or when you want to understand what the compiler doing with your code under the hood, you may want to print the contents of all the registers in the current frame.</p>

<p>To print the current register contents in LLDB it's <code>register read</code>:
<img src="/images/lldb.png" alt="console" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing RegexMatch for Mac]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/12/15/announcing-regexmatch-for-mac/"/>
    <updated>2012-12-15T06:44:00-06:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/12/15/announcing-regexmatch-for-mac</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://i.imgur.com/s2JWp.png">
We're delighted to announce our newest app - <strong>RegexMatch for Mac OS</strong>! If you use regular expressions in your development process, you'll want to <a href="https://itunes.apple.com/us/app/regexmatch/id582049745?mt=12">check it out</a>.  You can write and test regular expressions, then generate and export code in your language of choice.</p>

<p>Learn more about <a href="/products/regexmatch/macos">RegexMatch</a>.</p>

<p>Do you like RegexMatch - drop us a line <code>@CocoaFactory</code></p>
]]></content>
  </entry>
  
</feed>
