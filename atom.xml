<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cocoa Factory]]></title>
  <link href="http://cocoa-factory.github.com/atom.xml" rel="self"/>
  <link href="http://cocoa-factory.github.com/"/>
  <updated>2012-09-06T19:11:16-07:00</updated>
  <id>http://cocoa-factory.github.com/</id>
  <author>
    <name><![CDATA[Alan Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's a run loop anyway?  NSRunLoop 101]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/06/whats-a-run-loop-anyway/"/>
    <updated>2012-09-06T18:10:00-07:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/06/whats-a-run-loop-anyway</id>
    <content type="html"><![CDATA[<p><code>NSRunLoop</code> is one of the mysterious classes in the frameworks that few seem to understand really well.  I recently encountered difficulties with some aynshcronous networking code (more on that in a future post) and thought I&#8217;d share what I learned about run loops.</p>

<h2>Facts about run loops</h2>

<h3>Run loops manage input source events</h3>

<p>A run loop - <code>NSRunLoop</code> in Cocoa - is a class of objects that manages input sources, like user events (mouse, keyboard, etc.), <code>NSPort</code> events, and those that emanate from <code>NSConnection</code> objects.  You might think that the latter is the superclass of <code>NSURLConnection</code> objects; but you&#8217;d be wrong.  <code>NSURLConnection</code> is a subclass of <code>NSObject</code> - even though run loops manage events from <code>NSURLConnection</code> also.  So, you get the picture?  <code>NSRunLoop</code> manages events.</p>

<h3>Every thread gets a run loop</h3>

<p>If you create a thread, you get an <code>NSRunLoop</code> with it.</p>

<h3>(Most) run loops don&#8217;t run by themselves</h3>

<p>You must explictly run any run loop other than the main thread run loop.</p>

<h3>Run loops that have no input sources don&#8217;t run.</h3>

<p>Look closely at the documentation for <code>NSRunLoop</code> <code>run</code> method:  <em>&#8220;If no input sources or timers are attached to the run loop, this method exits immediately&#8230;&#8221;</em>  This means that if you want a run loop to keep turning, you need to find an event source to attach to it.  For example:</p>

<pre><code>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
[runLoop addPort:[NSPort port] forMode:NSDefaultRunLoopMode];

// now when we start the runLoop, we have an event source
[runLoop run];
</code></pre>

<p>But simply removing all input sources from a run loop is not guaranteed to stop it.  IF you want to stop a run loop, you must explicitly do so:  `</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOOL shouldRun = YES;    // this is in a "global" context
</span><span class='line'>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
</span><span class='line'>while( shouldRun && [runLoop runMode:NSDefaultRunLoopMode beforeData:[NSDate distantFuture]] );
</span><span class='line'>
</span><span class='line'>// set shouldRun to NO somewhere else to terminate the run loop</span></code></pre></td></tr></table></div></figure>


<h3>Run loops have modes and you can create your own</h3>

<p>Run loops have modes that specify groups of input sources that are monitored for the run loop running in that mode.  Usually you will just use the <code>NSDefaultRunLoopMode</code>; but the others are:</p>

<p><code>NSConnectionReplyMode</code> used with <code>NSConnection</code> objects</p>

<p><code>NSModalPanelRunLoopMode</code> used with events associated with modal panels in OS X</p>

<p><code>NSEventTrackingRunLoopMode</code> used with UI tracking events</p>

<p><code>NSRunLoopCommonModes</code> is a configurable group of common modes.  In Foundation is includes all of the modes except <code>NSConnectionReplyMode</code> by default.</p>

<p>If you want to create your own mode, just use a different string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
</span><span class='line'>[runLoop addPort:[NSPort port] forMode:@"com.cocoafactory.MySpecialMode"];</span></code></pre></td></tr></table></div></figure>


<p>Apple recommends reverse DNS notation to avoid stepping on someone else&#8217;s run loop.</p>

<h3>You rarely need to work directly with run loops</h3>

<p>Because the main run loop is vital to the application, the <code>run</code> method on <code>NSApplication</code> and <code>UIApplication</code> start the main run loop during the startup sequence. Otherwise, even for threads that you create yourself, you probably do not need to start its run loop.  If the thread needs to work with ports, input sources, timers, or certain connections, then you need to start and manage its run loop for those events.  More on some of those situations in a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're moving (blogs)]]></title>
    <link href="http://cocoa-factory.github.com/blog/2012/09/06/moving-to-octopress/"/>
    <updated>2012-09-06T15:57:00-07:00</updated>
    <id>http://cocoa-factory.github.com/blog/2012/09/06/moving-to-octopress</id>
    <content type="html"><![CDATA[<h2>Goodbye Wordpress, hello Octopress</h2>

<p>We&#8217;re in the process of moving all of our company pages and weblog to Octopress hosted through Github.  For several years, we maintained a presence on a dedicated site mostly setup with Wordpress.  Why the switch?</p>

<p>It came down to several factors:</p>

<ul>
<li><p>Lightweight vs. heavyweight solutions</p>

<p>  Wordpress is a great blogging platform; but there&#8217;s a lot of &#8220;stuff&#8221; to manage.  Further, it&#8217;s a dynamic content system - meaning, your content has to be generated from a database each time the page is rendered.  Octopress, instead, serves static pages.  There&#8217;s something appealingly simple about static content.</p></li>
<li><p>Workflow</p>

<p>  We develop software first, and blog second.  Writing about our work is important; but it has to fit into our workflow.  Since we are always working in <code>git</code> using Octopress feels very comfortable.</p></li>
<li><p>Kick-start</p>

<p>  Working through the challenges of getting Octopress installed (and they were significant) was paradoxically a motivator to get down to writing more.  I mean - having spent all this time getting Octopress installed, I&#8217;m not about to let the effort be wasted!</p></li>
<li><p>Comments</p>

<p>  I got tired of seeing queues of comments 99.9% of which was spam.  I&#8217;m sure Wordpress has better ways of dealing with comment spam - but I decided it was just easier to turn comments off on the new weblog.  The thing is, the real discussion isn&#8217;t happening on the weblog; it&#8217;s happening on Twitter and everywhere else.  You really should read Matt Gemmell&#8217;s <a href="http://mattgemmell.com/2011/11/29/comments-off/">comments on comments</a> about the phenomenon.</p></li>
</ul>


<h2>Installing Octopress</h2>

<p>Octopress installation was a little cumbersome owing mainly to difficulty with versioning of <code>rvm</code>.  After reading about the difficulties of installing on OS X 10.8, I decided to install it on Ubuntu 12.04 which I run as a virtual machine alongside Mountain Lion.  Again, it was mainly about making sure that the versioning of <code>rvm</code> was correct.  There are detailed instructions online, but I would add a couple of pointers:</p>

<p>We used <a href="http://www.lennu.net/2012/05/11/octopress-installation-in-ubuntu-12-dot-04-with-rsync/">a tutorial</a> on lennu.net to get started.  Just make sure you get <code>rvm 1.9.2</code> installed.  If you install the latest stable version, you&#8217;ll come to grief later in the installation.</p>

<p>Apart from that, all of the instructions are at Github and on the lennu.net tutorial.</p>
]]></content>
  </entry>
  
</feed>
